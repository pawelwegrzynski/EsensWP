{"version":3,"sources":["theme.ts","atoms.ts","components/card/mobile_card.tsx","components/card/hoverable_panel.tsx","components/card/card.tsx","components/card/empty_card.tsx","row.tsx","useBreakpoints.tsx","components/select.tsx","components/text_button.tsx","components/icon_button.tsx","selectors.ts","utils/mapDayIdToName.ts","filters.tsx","domains/calendar_item.ts","domains/day.ts","domains/calendar_screen.ts","legend.tsx","components/header.tsx","components/skeleton_card.tsx","dance_buy_dialog/register_form_stepper.tsx","utils/form_validations_utils.ts","components/labeled_textfield.tsx","components/phone_textfield.tsx","components/selectfield.tsx","components/datefield.tsx","dance_buy_dialog/dance_buy_dialog.tsx","operations/mutations/register_user.ts","calendar.tsx","use_calendar_creator.ts","operations/queries/get_calendar_schedule.ts","use_possible_filters.ts","App.tsx","reportWebVitals.js","index.js"],"names":["theme","createMuiTheme","palette","primary","main","responsiveFontSizes","_mainFilter","getMainFilter","setMainFilter","mainFilter","resetMainFilter","calendarItemsState","atom","key","default","selectedCardState","localizationFilterState","danceNameFilterState","instructorFilterState","danceAdvanceLevelFilterState","dayFilterState","groupStatusFilterState","isFiltersModalOpenState","height","isFiltersOpen","MobileCard","card","classes","useStyles","setSelectedCard","useSetRecoilState","startAt","split","startHour","startMinutes","endAt","endHour","endMinutes","className","element","Grid","container","direction","item","xs","title","innerTitle","name","Typography","variant","justify","attribute","instructor","join","address","advanceLevel","Box","display","justifyContent","alignItems","width","IconButton","onClick","id","makeStyles","root","flex","padding","cursor","borderLeft","fontSize","marginBottom","marginLeft","whiteSpace","textOverflow","overflow","button","color","tagName","userSelect","HoverablePanel","props","Grow","in","isOpen","hoverElement","position","top","bottom","right","background","fill","CalendarCard","React","memo","viewOnly","cardRef","useRef","cardRefContext","useContext","CardRefContext","useState","isHovered","setIsHovered","useEffect","setCardRef","current","ref","onMouseOver","onMouseOut","spacing","EmptyCard","cardHeight","clientHeight","minHeight","Row","noc","suitableSchable","extended","extend","day","isMobile","cardsByHours","getCardsByHours","Card","clsx","mt","Object","entries","sort","sortByStartTime","map","hour","cardsNumber","myCards","flexDirection","flexWrap","i","mapDaysToSize","Array","length","_","daysCount","hourA","hourB","firstHour","firstHourMinutes","secondHour","secondHourMinutes","useIsDevice","device","useTheme","mobile","useMediaQuery","breakpoints","down","tablet","between","desktop","up","useBreakpoints","isDesktop","isSmallMobile","isTablet","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","Select","setIsOpen","FormControl","fullWidth","InputLabel","label","labelId","open","onClose","e","preventDefault","stopPropagation","renderValue","value","filtersCount","CancelButton","onReset","onChange","target","multiple","values","a","b","filtredCount","v","MenuItem","option","mapOptions","Math","random","size","TextButton","Button","text","icon","filteredCalendarItemsState","selector","get","danceNameFilter","localizationFilter","danceAdvanceLevelFilter","instructorFilter","dayFilter","groupStatusFilter","filter","hasLocalization","some","filterItem","hasDanceName","hasInstructor","hasAdvanceLevel","hasDay","dayOfTheWeek","toString","hasGroupStatus","decisionList","push","every","decision","allLocalizationFiltersState","calendarItems","from","Set","count","filterWithMainFilter","allDanceNameFiltersState","allInstructorFiltersState","allDanceAdvanceLevelFiltersState","allGroupStatusFiltersState","allDayFiltersState","find","getPropValue","selectedCardFilterState","selectedCardsIds","isFilterActive","activeLocalizationFilters","activeDanceNameFilters","activeInstructorFilters","activeDanceAdvanceLevelFilters","activeDayFilters","activeGroupStatusFilters","mapDayIdToString","dayId","Filters","isShowMoreFiltersActive","setIsShowMoreFiltersActive","allLocalizationFilter","useRecoilValue","setDanceNameFilter","allDanceNameFilters","activeLocalizationFilter","setLocalizationFilter","activeDanceNameFilter","setInstructorFilter","setDanceAdvanceLevelFilter","activeDanceAdvanceLevelFilter","activeInstructorFilter","allInstructorFilters","allDanceAdvanceLevelFilters","allDayFilters","setDayFilter","activeDayFilter","allGroupStatusFilters","setGroupStatusFilter","activeGroupStatusFilter","isFiltersModalOpen","setIsFiltersModalOpen","group_name","level","form","days","status","styles","selectedFilters","sm","FilterList","prev","handleLocalizationFilterChange","resetAllFilters","handleDanceNameFilterChange","md","handleInstructorFilterChange","handleDanceAdvanceLevelFilterChange","handleGroupStatusChange","handleDayFilterChange","setFilter","found","includes","CalendarItem","prop","this","normalizeHour","identyfikator_comp","nazwa_grupy","nauczyciel","nabor","poziom_zaawansowania_nazwa","id_dzien","budynek","czas_poczatek","czas_koniec","normalizeToProps","simpleDate","minutes","Day","_filters","cards","filtredCards","c","create","filters","reduce","acc","CalendarScreen","options","selected","pick","pickedDays","getSelectedDays","countMinSchedule","addCard","dailyHours","mapValues","items","forEach","mainAccHour","Legend","hours","setHours","setTimeout","document","querySelector","children","measurement","getBoundingClientRect","classList","calendar","root2","h","marginRight","marginTop","MenuContext","createContext","menuValue","setMenuValue","StickyHeader","menuTitles","isActiveFilter","topOffset","disableCompensation","isSticky","distanceFromTop","result","x","f","index","currentScroll","currentElement","filtredTitles","zIndex","mr","pt","pb","m","window","scrollTo","boxShadow","SkeletonCard","Skeleton","dateSpan","RegisterFormStepper","Stepper","activeStep","alternativeLabel","Step","StepLabel","paddingLeft","paddingRight","r","stroke","minLength","limit","notEmpty","validateEmail","email","test","String","toLowerCase","LabeledTextField","TextField","multiline","rows","undefined","setValue","onFocus","setIsFocused","onBlur","setIsPristine","InputLabelProps","shrink","error","isPristine","isValid","helperText","errorMessage","useTextField","initialValue","isFocused","useMemo","validator","inputComponent","reset","PhoneTextField","htmlFor","OutlinedInput","FormHelperText","SelectField","DateField","type","DialogTitle","withStyles","createStyles","margin","closeButton","grey","other","disableTypography","aria-label","DialogContent","MuiDialogContent","DialogActions","MuiDialogActions","DanceBuyDialog","isCaptchaValid","setIsCaptchaValid","results","setResults","isLoading","setIsLoading","registerUser","axios","post","process","then","response","data","console","log","localStorage","setItem","token","useRegisterUser","selectedCard","firstnameField","lastnameField","emailField","opinionField","phoneField","usePhoneTextField","TextMaskCustom","partialValue","trim","sexField","useSelectField","dateField","useDateField","recaptchaRef","createRef","Dialog","aria-labelledby","paper","content","maxWidth","Divider","orientation","onSubmit","execute","sitekey","autoFocus","createUserDto","firstname","lastname","opinion","phone","sex","birthDate","disabled","inputRef","inputElement","mask","placeholderChar","showMask","Calendar","calendarData","setCalendarItems","dane","d","createFromRaw","useGetCalendarSchedule","groupName","id_forma_ruchu","id_styl_taneczny","typ","usePossibleFilters","filtredState","setSelectedFilters","calendarScreen","sortedByDay","row","menuContext","elems","querySelectorAll","textContent","keys","defaultFilters","minWidth","scheduleArea","pl","allDays","dayName","getSuitableSchedule","rowContainer","pr","paddingBottom","borderRight","divider","App","getItem","Provider","ThemeProvider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.60d59650.chunk.js","sourcesContent":["import { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\n\nexport let theme = createMuiTheme({\n    palette: {\n        primary: {\n            main: '#02B2ED',\n        },\n    },\n});\n\ntheme = responsiveFontSizes(theme);\n","import { atom } from 'recoil';\nimport { CalendarItem } from './domains/calendar_item';\n\nexport interface FilterItem {\n    name: string;\n    count: number;\n    filtredCount: number;\n}\n\nlet _mainFilter: string | null = null;\n\nexport function getMainFilter(): string | null {\n    return _mainFilter;\n}\n\nexport function setMainFilter(mainFilter: string): void {\n    _mainFilter = mainFilter;\n}\n\nexport function resetMainFilter(): void {\n    _mainFilter = null;\n}\n\nexport const calendarItemsState = atom<CalendarItem[]>({\n    key: 'calendar_items',\n    default: [],\n});\n\nexport const selectedCardState = atom<string[]>({\n    key: 'selected_card',\n    default: [],\n});\n\nexport const localizationFilterState = atom<FilterItem[]>({\n    key: 'localization_filter',\n    default: [],\n});\n\nexport const danceNameFilterState = atom<FilterItem[]>({\n    key: 'dance_name_filter',\n    default: [],\n});\n\nexport const instructorFilterState = atom<FilterItem[]>({\n    key: 'instructor_filter',\n    default: [],\n});\n\nexport const danceAdvanceLevelFilterState = atom<FilterItem[]>({\n    key: 'dance_advance_level_filter',\n    default: [],\n});\n\nexport const dayFilterState = atom<FilterItem[]>({\n    key: 'day_filter',\n    default: [],\n});\n\nexport const groupStatusFilterState = atom<FilterItem[]>({\n    key: 'group_status_filter',\n    default: [],\n});\n\nexport const minCardMeasurementState = atom<{ height: number }>({\n    key: 'min_card_height_state',\n    default: {\n        height: 100,\n    },\n});\n\nexport const isFiltersModalOpenState = atom<{ isFiltersOpen: boolean }>({\n    key: 'is_filters_modal_open_state',\n    default: {\n        isFiltersOpen: false,\n    },\n});\n","import React from 'react';\nimport {\n    Grid,\n    Card,\n    makeStyles,\n    Typography,\n    Box,\n    IconButton,\n} from '@material-ui/core';\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\nimport { useSetRecoilState } from 'recoil';\nimport { CalendarItem } from '../../domains/calendar_item';\nimport { selectedCardState } from '../../atoms';\n\ninterface Props {\n    card: CalendarItem;\n}\n\nexport function MobileCard({ card }: Props) {\n    const classes = useStyles();\n    const setSelectedCard = useSetRecoilState(selectedCardState);\n\n    const [startHour, startMinutes] = card.startAt.split(':');\n    const [endHour, endMinutes] = card.endAt.split(':');\n\n    return (\n        <div className={classes.element}>\n            <Card className={classes.card}>\n                <Grid container direction='row'>\n                    <Grid item xs={10}>\n                        <Grid container>\n                            <Grid item xs={12} className={classes.title}>\n                                <div\n                                    className={classes.innerTitle}\n                                    title={card.name}\n                                >\n                                    <Typography variant='h5'>\n                                        {card.name}\n                                    </Typography>\n                                </div>\n                            </Grid>\n                        </Grid>\n                        <Grid container justify='space-between'>\n                            <Grid item xs={12} className={classes.attribute}>\n                                <Typography variant='subtitle2'>\n                                    {card.instructor}\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                        <Grid container>\n                            <Grid item xs={12} className={classes.attribute}>\n                                <Typography variant='subtitle2'>\n                                    {[startHour, startMinutes].join(':')}-\n                                    {[endHour, endMinutes].join(':')}{' '}\n                                    {card.address}\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                        <Grid container justify='space-between'>\n                            <Grid item xs={12} className={classes.attribute}>\n                                <Typography variant='subtitle2'>\n                                    {card.advanceLevel}\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={2}>\n                        <Box\n                            display='flex'\n                            justifyContent='center'\n                            alignItems='center'\n                            width='100%'\n                            height='100%'\n                        >\n                            <IconButton\n                                onClick={() => setSelectedCard([card.id])}\n                            >\n                                <AddShoppingCartIcon />\n                            </IconButton>\n                        </Box>\n                    </Grid>\n                </Grid>\n            </Card>\n        </div>\n    );\n}\n\nconst useStyles = makeStyles({\n    root: {\n        flex: 1,\n    },\n    element: {\n        padding: '12px 12px 0 0',\n        display: 'flex',\n        cursor: 'default',\n        // minWidth: 200,\n    },\n    card: {\n        borderLeft: '3px solid #02B2ED',\n        // padding: `8px 0 0 0`,\n        width: '100%',\n    },\n    title: {\n        fontSize: 12,\n        marginBottom: 8,\n    },\n    innerTitle: {\n        marginLeft: 8,\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        // height: 30,\n    },\n    attribute: {\n        marginBottom: 8,\n        marginLeft: 8,\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n    },\n    button: {\n        color: '#1976D2',\n        fontSize: 9,\n    },\n    tagName: {\n        fontSize: 24,\n        color: 'rgba(0,0,0,.54)',\n        cursor: 'default',\n        userSelect: 'none',\n        height: 30,\n    },\n});\n","import { Grow, makeStyles, IconButton } from '@material-ui/core';\nimport AddShoppingCartIcon from '@material-ui/icons/AddShoppingCart';\n\ninterface HoverablePanelProps {\n    isOpen: boolean;\n    onClick: () => void;\n}\n\nexport function HoverablePanel(props: HoverablePanelProps) {\n    const classes = useStyles();\n\n    return (\n        <Grow in={props.isOpen}>\n            <div className={classes.hoverElement}>\n                <IconButton onClick={props.onClick}>\n                    <AddShoppingCartIcon />\n                </IconButton>\n            </div>\n        </Grow>\n    );\n}\n\nconst useStyles = makeStyles({\n    hoverElement: {\n        position: 'absolute',\n        top: 0,\n        bottom: 0,\n        right: 0,\n        display: 'flex',\n        background: '#02B2ED',\n        alignItems: 'center',\n        '& svg': {\n            fill: '#ffffff',\n        },\n    },\n});\n","import React from 'react';\nimport { Grid, Card, makeStyles, Typography } from '@material-ui/core';\n\nimport { CalendarItem } from '../../domains/calendar_item';\nimport { CardRefContext } from '../../App';\nimport { useSetRecoilState } from 'recoil';\nimport { selectedCardState } from '../../atoms';\nimport { HoverablePanel } from './hoverable_panel';\n\ninterface Props {\n    card: CalendarItem;\n    viewOnly?: boolean;\n}\n\nexport const CalendarCard = React.memo(function CalendarCard({\n    card,\n    viewOnly,\n}: Props) {\n    const classes = useStyles();\n    const cardRef = React.useRef(null);\n    const cardRefContext = React.useContext(CardRefContext);\n    const [isHovered, setIsHovered] = React.useState(false);\n    const setSelectedCard = useSetRecoilState(selectedCardState);\n\n    const [startHour, startMinutes] = card.startAt.split(':');\n    const [endHour, endMinutes] = card.endAt.split(':');\n\n    React.useEffect(() => {\n        cardRefContext.setCardRef(cardRef.current!);\n    }, [cardRefContext]);\n\n    return (\n        <Card\n            classes={{ root: classes.card }}\n            ref={cardRef}\n            onMouseOver={handleMouseOverCard}\n            onMouseOut={handleMouseOutCard}\n        >\n            <Grid container spacing={1}>\n                <Grid item xs={12}>\n                    <Typography\n                        variant='h5'\n                        title={card.name}\n                        className={classes.innerTitle}\n                    >\n                        {card.name}\n                    </Typography>\n                </Grid>\n                <Grid item xs={12} className={classes.attribute}>\n                    <Typography variant='subtitle2'>\n                        {card.instructor}\n                    </Typography>\n                </Grid>\n                <Grid item xs={12} className={classes.attribute}>\n                    <Typography variant='subtitle2'>\n                        {[startHour, startMinutes].join(':')}-\n                        {[endHour, endMinutes].join(':')} {card.address}\n                    </Typography>\n                </Grid>\n                <Grid item xs={12} className={classes.attribute}>\n                    <Typography variant='subtitle2'>\n                        {card.advanceLevel}\n                    </Typography>\n                </Grid>\n            </Grid>\n            <HoverablePanel isOpen={isHovered} onClick={handleBuyClick} />\n        </Card>\n    );\n\n    function handleMouseOverCard() {\n        if (!viewOnly && !isHovered) {\n            setIsHovered(true);\n        }\n    }\n\n    function handleMouseOutCard() {\n        if (!viewOnly && isHovered) {\n            setIsHovered(false);\n        }\n    }\n\n    function handleBuyClick() {\n        setSelectedCard([card.id]);\n    }\n});\n\nconst useStyles = makeStyles({\n    card: {\n        borderLeft: '3px solid #02B2ED',\n        position: 'relative',\n        cursor: 'default',\n        padding: 8,\n        marginBottom: 8,\n    },\n    innerTitle: {\n        marginBottom: 8,\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n    },\n    attribute: {\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n    },\n});\n","import React from 'react';\nimport { makeStyles, Theme } from '@material-ui/core';\nimport { CardRefContext } from '../../App';\n\nexport const EmptyCard = React.memo(function EmptyCard() {\n    const cardRefContext = React.useContext(CardRefContext);\n    const cardHeight = cardRefContext.cardRef?.clientHeight ?? 100;\n    const classes = useStyles({ height: cardHeight });\n\n    return <div className={classes.element}>&nbsp;</div>;\n});\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    element: {\n        display: 'flex',\n        minHeight: (props: { height: number }) => props.height,\n        userSelect: 'none',\n        marginBottom: 8,\n    },\n}));\n","import React, { useRef } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport FlipMove from 'react-flip-move';\nimport { Box, Typography } from '@material-ui/core';\nimport { Day } from './domains/day';\nimport { MobileCard } from './components/card/mobile_card';\nimport { CalendarCard } from './components/card/card';\nimport { EmptyCard } from './components/card/empty_card';\n\ninterface Props {\n    name: string;\n    day: Day;\n    noc: number;\n    suitableSchable: { [index: string]: number };\n    extended?: boolean;\n    extend?: boolean;\n    isMobile?: boolean;\n}\n\nexport function Row({\n    name,\n    noc,\n    suitableSchable,\n    extended,\n    extend,\n    day,\n    isMobile,\n}: Props) {\n    const classes = useStyles();\n    const ref = useRef<any>(null);\n    const cardsByHours = day.getCardsByHours();\n\n    const Card = isMobile ? MobileCard : CalendarCard;\n\n    return (\n        <div className={classes.root} ref={ref}>\n            <div className={clsx(classes.tagName, 'day-row')}>\n                {isMobile ? (\n                    <Box mt={3} display='flex' justifyContent='center'>\n                        <Typography variant='h2'>{name}</Typography>\n                    </Box>\n                ) : (\n                    name\n                )}\n            </div>\n            <div className='singleRow'>\n                <FlipMove>\n                    {Object.entries(suitableSchable)\n                        .sort(sortByStartTime)\n                        .map(([hour, cardsNumber]) => {\n                            const myCards = cardsByHours[hour];\n\n                            if (!myCards) {\n                                return (\n                                    <Box\n                                        display='flex'\n                                        flexDirection={\n                                            extend ? 'row' : 'column'\n                                        }\n                                        flexWrap='wrap'\n                                        key={hour + cardsNumber}\n                                        className={hour}\n                                    >\n                                        {new Array(extended ? cardsNumber : 0)\n                                            .fill(null)\n                                            .map(() => (\n                                                <Box width={mapDaysToSize(noc)}>\n                                                    <EmptyCard />\n                                                </Box>\n                                            ))}\n                                    </Box>\n                                );\n                            }\n\n                            return (\n                                <Box\n                                    display='flex'\n                                    flexDirection={extend ? 'row' : 'column'}\n                                    flexWrap='wrap'\n                                    key={hour}\n                                    className={hour}\n                                >\n                                    {myCards.map((card, i) => (\n                                        <Box\n                                            width={\n                                                isMobile\n                                                    ? 1\n                                                    : mapDaysToSize(noc)\n                                            }\n                                            key={card.id + i}\n                                        >\n                                            <Card card={card} />\n                                        </Box>\n                                    ))}\n                                    {new Array(\n                                        extended\n                                            ? cardsNumber - myCards.length\n                                            : 0,\n                                    )\n                                        .fill(null)\n                                        .map((_, i) => (\n                                            <Box\n                                                width={mapDaysToSize(noc)}\n                                                key={i}\n                                            >\n                                                <EmptyCard />\n                                            </Box>\n                                        ))}\n                                </Box>\n                            );\n                        })}\n                </FlipMove>\n            </div>\n        </div>\n    );\n}\n\nfunction mapDaysToSize(daysCount: number) {\n    if (daysCount === 6) return 1;\n    if (daysCount === 5) return 1;\n    if (daysCount === 4) return 1;\n    if (daysCount === 3) return 1 / 2;\n    if (daysCount === 2) return 1 / 2;\n    if (daysCount === 1) return 1 / 4;\n\n    return 1;\n}\n\nfunction sortByStartTime([hourA]: [string, number], [hourB]: [string, number]) {\n    const [firstHour, firstHourMinutes] = hourA.split(':');\n    const [secondHour, secondHourMinutes] = hourB.split(':');\n\n    if (firstHour > secondHour) return 1;\n\n    if (firstHour === secondHour) {\n        return firstHourMinutes > secondHourMinutes ? 1 : -1;\n    }\n\n    return -1;\n}\n\nconst useStyles = makeStyles({\n    root: {\n        flex: 1,\n    },\n    tagName: {\n        fontSize: 24,\n        color: 'rgba(0,0,0,.54)',\n        cursor: 'default',\n        userSelect: 'none',\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n    },\n});\n","import { useTheme, useMediaQuery } from '@material-ui/core';\n\nexport type Device = 'MOBILE' | 'TABLET' | 'DESKTOP';\n\nexport function useBreakpoints(): Device {\n    const theme = useTheme();\n\n    const mobile = useMediaQuery(theme.breakpoints.down('sm')) && 'MOBILE';\n    const tablet =\n        useMediaQuery(theme.breakpoints.between('sm', 'md')) && 'TABLET';\n    const desktop = useMediaQuery(theme.breakpoints.up('md')) && 'DESKTOP';\n\n    return mobile || tablet || desktop || 'DESKTOP';\n}\n\nexport function useIsDevice() {\n    const device = useBreakpoints();\n    const theme = useTheme();\n\n    return {\n        isDesktop: device === 'DESKTOP',\n        isMobile: device === 'MOBILE',\n        isSmallMobile: useMediaQuery(theme.breakpoints.down('xs')),\n        isTablet: device === 'TABLET',\n    };\n}\n","import React from 'react';\nimport {\n    MenuItem,\n    Select as MultiSelect,\n    InputLabel,\n    FormControl,\n    IconButton,\n    Typography,\n    makeStyles,\n} from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { FilterItem } from '../atoms';\n\ninterface Props<T> {\n    label: string;\n    value: string[];\n    values: T[];\n    onChange: (value: string[]) => void;\n    onReset: () => void;\n    mapOptions?: (value: T) => string;\n}\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n    PaperProps: {\n        style: {\n            maxHeight: ITEM_HEIGHT * 6 + ITEM_PADDING_TOP,\n            width: 250,\n        },\n    },\n};\n\nexport function Select<T extends FilterItem>(props: Props<T>) {\n    const [isOpen, setIsOpen] = React.useState(false);\n\n    const classes = useStyles();\n\n    return (\n        <FormControl variant='outlined' fullWidth>\n            <InputLabel id={props.label}>{props.label}</InputLabel>\n            <MultiSelect\n                labelId={props.label}\n                fullWidth\n                open={isOpen}\n                onClick={() => setIsOpen(true)}\n                onClose={(e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n\n                    setIsOpen(false);\n                }}\n                renderValue={(value) => {\n                    const filtersCount = (value as string[]).length;\n\n                    if (filtersCount === 1)\n                        return (\n                            <div>\n                                {filtersCount} filtr{' '}\n                                <CancelButton\n                                    onClick={() => {\n                                        // resetMainFilter();\n                                        props.onReset();\n                                    }}\n                                />\n                            </div>\n                        );\n                    if (filtersCount >= 2 || filtersCount <= 4)\n                        return (\n                            <div>\n                                {filtersCount} filtry\n                                <CancelButton\n                                    onClick={() => {\n                                        // resetMainFilter();\n                                        props.onReset();\n                                    }}\n                                />\n                            </div>\n                        );\n\n                    return (\n                        <div>\n                            {filtersCount} filtrów{' '}\n                            <CancelButton\n                                onClick={() => {\n                                    // resetMainFilter();\n                                    props.onReset();\n                                }}\n                            />\n                        </div>\n                    );\n                }}\n                label={props.label}\n                onChange={({ target: { value } }) => {\n                    props.onChange(value as string[]);\n                }}\n                value={props.value}\n                multiple\n                MenuProps={MenuProps}\n            >\n                {(\n                    [...(props.values || [])].sort(\n                        (a, b) => b.filtredCount - a.filtredCount,\n                    ) || []\n                )\n                    // .filter((v) => v.filtredCount !== 0)\n                    .sort((a, b) => (a.filtredCount > b.filtredCount ? 1 : -1))\n                    .map((v) => (\n                        <MenuItem\n                            key={Math.random()}\n                            value={v.name}\n                            // disabled={v.filtredCount === 0}\n                        >\n                            <Typography\n                                variant='overline'\n                                className={classes.option}\n                            >\n                                {props.mapOptions\n                                    ? props.mapOptions(v)\n                                    : v.name}\n                                {/* &nbsp;\n                                {v.filtredCount !== 0\n                                    ? `(${v.filtredCount} / ${v.count})`\n                                    : ''} */}\n                                {/* {v.filtredCount !== 0\n                                    ? v.filtredCount + ' /'\n                                    : ''}\n                                {'- '}\n                                {v.count}) */}\n                            </Typography>\n                        </MenuItem>\n                    ))}\n            </MultiSelect>\n        </FormControl>\n    );\n}\n\nfunction CancelButton({ onClick }: { onClick: () => void }) {\n    return (\n        <span\n            onClick={(e) => {\n                e.stopPropagation();\n\n                onClick();\n            }}\n        >\n            <IconButton size='small'>\n                <CloseIcon fontSize='small' />\n            </IconButton>\n        </span>\n    );\n}\n\nconst useStyles = makeStyles({\n    option: {\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n    },\n});\n","import React from 'react';\nimport { Button } from '@material-ui/core';\n\ninterface Props {\n    text: string;\n    onClick: () => void;\n}\n\nexport function TextButton(props: Props) {\n    return (\n        <Button color='primary' onClick={props.onClick}>\n            {props.text}\n        </Button>\n    );\n}\n","import React from 'react';\nimport { Button, makeStyles } from '@material-ui/core';\n\ninterface Props {\n    icon: React.ReactNode;\n    text: string;\n    onClick: () => void;\n}\n\nexport function IconButton(props: Props) {\n    const classes = useStyles();\n\n    return (\n        <Button\n            classes={{ root: classes.button }}\n            variant='contained'\n            color='primary'\n            onClick={props.onClick}\n        >\n            {props.icon} {props.text}\n        </Button>\n    );\n}\n\nconst useStyles = makeStyles({\n    button: {\n        color: 'white',\n    },\n});\n","import { GetRecoilValue, selector } from 'recoil';\nimport {\n    FilterItem,\n    getMainFilter,\n    instructorFilterState,\n    selectedCardState,\n} from './atoms';\nimport { CalendarItem } from './domains/calendar_item';\nimport { dayFilterState, groupStatusFilterState } from './atoms';\nimport {\n    localizationFilterState,\n    danceNameFilterState,\n    calendarItemsState,\n    danceAdvanceLevelFilterState,\n} from './atoms';\n\nexport const filteredCalendarItemsState = selector({\n    key: 'filteredTodoListState',\n    get: ({ get }) => {\n        const danceNameFilter = get(danceNameFilterState);\n        const localizationFilter = get(localizationFilterState);\n        const danceAdvanceLevelFilter = get(danceAdvanceLevelFilterState);\n        const instructorFilter = get(instructorFilterState);\n        const dayFilter = get(dayFilterState);\n        const groupStatusFilter = get(groupStatusFilterState);\n        const calendarItems = get(calendarItemsState);\n\n        return calendarItems.filter((item) => {\n            const hasLocalization =\n                localizationFilter.some(\n                    (filterItem) => filterItem.name === item.address,\n                ) ?? false;\n\n            const hasDanceName =\n                danceNameFilter.some(\n                    (filterItem) => filterItem.name === item.name,\n                ) ?? false;\n            const hasInstructor =\n                instructorFilter.some(\n                    (filterItem) => filterItem.name === item.instructor,\n                ) ?? false;\n            const hasAdvanceLevel =\n                danceAdvanceLevelFilter.some(\n                    (filterItem) => filterItem.name === item.advanceLevel,\n                ) ?? false;\n\n            const hasDay =\n                dayFilter.some(\n                    (filterItem) =>\n                        filterItem.name === item.dayOfTheWeek.toString(),\n                ) ?? false;\n\n            const hasGroupStatus =\n                groupStatusFilter.some(\n                    (filterItem) =>\n                        filterItem.name ===\n                        (item.isOpen ? 'otwarte' : 'zamknięte'),\n                ) ?? false;\n\n            let decisionList: boolean[] = [];\n\n            if (localizationFilter.length > 0)\n                decisionList.push(hasLocalization);\n            if (danceNameFilter.length > 0) decisionList.push(hasDanceName);\n            if (instructorFilter.length > 0) decisionList.push(hasInstructor);\n            if (danceAdvanceLevelFilter.length > 0)\n                decisionList.push(hasAdvanceLevel);\n            if (groupStatusFilter.length > 0) decisionList.push(hasGroupStatus);\n            if (dayFilter.length > 0) decisionList.push(hasDay);\n\n            return decisionList.length > 0\n                ? decisionList.every((decision) => decision)\n                : true;\n        });\n    },\n});\n\nexport const allLocalizationFiltersState = selector<FilterItem[]>({\n    key: 'all_localization_filters',\n    get: ({ get }) => {\n        const calendarItems = get(calendarItemsState);\n        const mainFilter = getMainFilter();\n\n        return Array.from(new Set(calendarItems.map((item) => item.address)))\n            .map((name) => {\n                const count = calendarItems.filter(\n                    (item) => item.address === name,\n                ).length;\n\n                const filtredCount = filterWithMainFilter({ get }).filter(\n                    (item) => {\n                        return item.address === name;\n                    },\n                ).length;\n\n                return {\n                    name,\n                    count,\n                    filtredCount,\n                };\n            })\n            .filter((filter) => {\n                if (!filter || mainFilter === 'address') return true;\n\n                return filter.filtredCount > 0;\n            });\n    },\n});\n\nexport const allDanceNameFiltersState = selector<FilterItem[]>({\n    key: 'all_dance_name_filters',\n    get: ({ get }) => {\n        const calendarItems = get(calendarItemsState);\n        const mainFilter = getMainFilter();\n\n        return Array.from(new Set(calendarItems.map((item) => item.name)))\n            .map((name) => {\n                const count = calendarItems.filter((item) => item.name === name)\n                    .length;\n\n                const filtredCount = filterWithMainFilter({ get }).filter(\n                    (item) => {\n                        return item.name === name;\n                    },\n                ).length;\n\n                return {\n                    name,\n                    count,\n                    filtredCount,\n                };\n            })\n            .filter((filter) => {\n                if (!filter || mainFilter === 'name') return true;\n\n                return filter.filtredCount > 0;\n            });\n    },\n});\n\nexport const allInstructorFiltersState = selector<FilterItem[]>({\n    key: 'all_instructor_filters',\n    get: ({ get }) => {\n        const calendarItems = get(calendarItemsState);\n        const mainFilter = getMainFilter();\n\n        return Array.from(new Set(calendarItems.map((item) => item.instructor)))\n            .map((name) => {\n                const count = calendarItems.filter(\n                    (item) => item.instructor === name,\n                ).length;\n\n                const filtredCount = filterWithMainFilter({ get }).filter(\n                    (item) => item.instructor === name,\n                ).length;\n\n                return {\n                    name,\n                    count,\n                    filtredCount,\n                };\n            })\n            .filter((filter) => {\n                if (!filter || mainFilter === 'instructor') return true;\n\n                return filter.filtredCount > 0;\n            });\n    },\n});\n\nexport const allDanceAdvanceLevelFiltersState = selector<FilterItem[]>({\n    key: 'all_dance_advance_level_filters',\n    get: ({ get }) => {\n        const calendarItems = get(calendarItemsState);\n        const mainFilter = getMainFilter();\n\n        return Array.from(\n            new Set(calendarItems.map((item) => item.advanceLevel)),\n        )\n            .map((name) => {\n                const count = calendarItems.filter(\n                    (item) => item.advanceLevel === name,\n                ).length;\n\n                const filtredCount = filterWithMainFilter({ get }).filter(\n                    (item) => item.advanceLevel === name,\n                ).length;\n\n                return {\n                    name,\n                    count,\n                    filtredCount,\n                };\n            })\n            .filter((filter) => {\n                if (!filter || mainFilter === 'advanceLevel') return true;\n\n                return filter.filtredCount > 0;\n            });\n    },\n});\n\nexport const allGroupStatusFiltersState = selector<FilterItem[]>({\n    key: 'all_group_status_filters',\n    get: ({ get }) => {\n        const calendarItems = get(calendarItemsState);\n        const mainFilter = getMainFilter();\n\n        return Array.from(new Set(calendarItems.map((item) => item.isOpen)))\n            .map((name) => {\n                const count = calendarItems.filter(\n                    (item) => item.isOpen === name,\n                ).length;\n\n                const filtredCount = filterWithMainFilter({ get }).filter(\n                    (item) => item.isOpen === name,\n                ).length;\n\n                return {\n                    name: name ? 'otwarte' : 'zamknięte',\n                    count,\n                    filtredCount,\n                };\n            })\n            .filter((filter) => {\n                if (!filter || mainFilter === 'isOpen') return true;\n\n                return filter.filtredCount > 0;\n            });\n    },\n});\n\nexport const allDayFiltersState = selector<FilterItem[]>({\n    key: 'all_day_filters',\n    get: ({ get }) => {\n        const calendarItems = get(calendarItemsState);\n        const mainFilter = getMainFilter();\n\n        return Array.from(\n            new Set(calendarItems.map((item) => item.dayOfTheWeek.toString())),\n        )\n            .map((name) => {\n                const count = calendarItems.filter(\n                    (item) => item.dayOfTheWeek.toString() === name,\n                ).length;\n\n                const filtredCount = filterWithMainFilter({ get }).filter(\n                    (item) => item.dayOfTheWeek.toString() === name,\n                ).length;\n\n                return {\n                    name,\n                    count,\n                    filtredCount,\n                };\n            })\n            .filter((filter) => {\n                if (!filter || mainFilter === 'dayOfTheWeek') return true;\n\n                return filter.filtredCount > 0;\n            });\n    },\n});\n\n// export const allGroupStatusFiltersState = selector<FilterItem[]>({\n//     key: 'all_group_status_filters',\n//     get: ({ get }) => {\n//         const calendarItems = get(calendarItemsState);\n//         const mainFilter = getMainFilter();\n\n//         return Array.from(\n//             new Set(calendarItems.map((item) => item.isOpen)),\n//         )\n//             .map((name) => {\n//                 const count = calendarItems.filter(\n//                     (item) => item.isOpen === name,\n//                 ).length;\n\n//                 const filtredCount = filterWithMainFilter({ get }).filter(\n//                     (item) => item.isOpen === name,\n//                 ).length;\n\n//                 return {\n//                     name,\n//                     count,\n//                     filtredCount,\n//                 };\n//             })\n//             .filter((filter) => {\n//                 if (!filter || mainFilter === 'isOpen') return true;\n\n//                 return filter.filtredCount > 0;\n//             });\n//     },\n// });\n\nfunction filterWithMainFilter({\n    get,\n}: {\n    get: GetRecoilValue;\n}): CalendarItem[] {\n    const mainFilter = getMainFilter();\n    const calendarItems = get(calendarItemsState);\n    const localizationFilter = get(localizationFilterState);\n    const danceNameFilter = get(danceNameFilterState);\n    const danceAdvanceLevelFilter = get(danceAdvanceLevelFilterState);\n    const groupStatusFilter = get(groupStatusFilterState);\n    const instructorFilter = get(instructorFilterState);\n    const dayFilter = get(dayFilterState);\n\n    const filtredItems = calendarItems.filter((item) => {\n        if (mainFilter === 'address') {\n            const hasDanceAddress = localizationFilter.find(\n                (filter) => filter.name === item.getPropValue(mainFilter),\n            );\n\n            return hasDanceAddress;\n        }\n\n        if (mainFilter === 'name') {\n            const hasDanceName = danceNameFilter.find(\n                (filter) => filter.name === item.getPropValue(mainFilter),\n            );\n\n            return hasDanceName;\n        }\n\n        if (mainFilter === 'instructor') {\n            const hasInstructor = instructorFilter.find(\n                (filter) => filter.name === item.getPropValue(mainFilter),\n            );\n\n            return hasInstructor;\n        }\n\n        if (mainFilter === 'advanceLevel') {\n            const hasDanceAdvanceLevel = danceAdvanceLevelFilter.find(\n                (filter) => filter.name === item.getPropValue(mainFilter),\n            );\n\n            return hasDanceAdvanceLevel;\n        }\n\n        if (mainFilter === 'isOpen') {\n            const hasGroupStatusLevel = groupStatusFilter.find(\n                (filter) =>\n                    filter.name ===\n                    (item.getPropValue(mainFilter) ? 'otwarte' : 'zamknięte'),\n            );\n\n            return hasGroupStatusLevel;\n        }\n\n        if (mainFilter === 'dayOfTheWeek') {\n            const hasDay = dayFilter.find(\n                (filter) =>\n                    filter.name === item.getPropValue(mainFilter).toString(),\n            );\n\n            return hasDay;\n        }\n\n        return true;\n    });\n\n    return filtredItems;\n}\n\nexport const selectedCardFilterState = selector<CalendarItem | undefined>({\n    key: 'selected_card_filters',\n    get: ({ get }) => {\n        const calendarItems = get(calendarItemsState);\n        const selectedCardsIds = get(selectedCardState);\n\n        return calendarItems.find((item) => item.id === selectedCardsIds[0]);\n    },\n});\n\nexport const isFilterActive = selector<boolean>({\n    key: 'is_filter_active',\n    get: ({ get }) => {\n        const activeLocalizationFilters = get(localizationFilterState);\n        const activeDanceNameFilters = get(danceNameFilterState);\n        const activeInstructorFilters = get(instructorFilterState);\n        const activeDanceAdvanceLevelFilters = get(\n            danceAdvanceLevelFilterState,\n        );\n        const activeDayFilters = get(dayFilterState);\n        const activeGroupStatusFilters = get(groupStatusFilterState);\n\n        return (\n            activeLocalizationFilters.length > 0 ||\n            activeDanceNameFilters.length > 0 ||\n            activeInstructorFilters.length > 0 ||\n            activeDanceAdvanceLevelFilters.length > 0 ||\n            activeDayFilters.length > 0 ||\n            activeGroupStatusFilters.length > 0\n        );\n    },\n});\n","export function mapDayIdToString(dayId: string) {\n    if (dayId === '1') return 'Poniedziałek';\n    if (dayId === '2') return 'Wtorek';\n    if (dayId === '3') return 'Środa';\n    if (dayId === '4') return 'Czwartek';\n    if (dayId === '5') return 'Piątek';\n    if (dayId === '6') return 'Sobota';\n\n    return 'Niedziela';\n}\n","import React from 'react';\nimport { Grid, Box, Grow } from '@material-ui/core';\nimport { FilterList as FilterListIcon } from '@material-ui/icons';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { useIsDevice } from './useBreakpoints';\nimport { Select } from './components/select';\nimport { TextButton } from './components/text_button';\nimport { IconButton } from './components/icon_button';\nimport {\n    allInstructorFiltersState,\n    allDayFiltersState,\n    allDanceNameFiltersState,\n    allDanceAdvanceLevelFiltersState,\n    allLocalizationFiltersState,\n    allGroupStatusFiltersState,\n} from './selectors';\nimport {\n    dayFilterState,\n    instructorFilterState,\n    danceNameFilterState,\n    danceAdvanceLevelFilterState,\n    groupStatusFilterState,\n    setMainFilter,\n    getMainFilter,\n    localizationFilterState,\n    resetMainFilter,\n    isFiltersModalOpenState,\n} from './atoms';\n\nimport { mapDayIdToString } from './utils/mapDayIdToName';\n\ninterface Props {\n    defaultFilters: {\n        group_name: string[];\n        level: string[];\n        form: string[];\n        days: string[];\n        styles: string[];\n        status: string[];\n        type: string[];\n    };\n    onChange: (value: AllFilters) => void;\n}\n\nexport interface AllFilters {\n    group_name: string[];\n    level: string[];\n    form: string[];\n    days: string[];\n    status: string[];\n    styles: string[];\n}\n\nexport function Filters(props: Props) {\n    const [\n        isShowMoreFiltersActive,\n        setIsShowMoreFiltersActive,\n    ] = React.useState(false);\n    const allLocalizationFilter = useRecoilValue(allLocalizationFiltersState);\n    const setDanceNameFilter = useSetRecoilState(danceNameFilterState);\n    const allDanceNameFilters = useRecoilValue(allDanceNameFiltersState);\n    const activeLocalizationFilter = useRecoilValue(localizationFilterState);\n    const setLocalizationFilter = useSetRecoilState(localizationFilterState);\n    const activeDanceNameFilter = useRecoilValue(danceNameFilterState);\n    const setInstructorFilter = useSetRecoilState(instructorFilterState);\n    const setDanceAdvanceLevelFilter = useSetRecoilState(\n        danceAdvanceLevelFilterState,\n    );\n    const activeDanceAdvanceLevelFilter = useRecoilValue(\n        danceAdvanceLevelFilterState,\n    );\n\n    const activeInstructorFilter = useRecoilValue(instructorFilterState);\n    const allInstructorFilters = useRecoilValue(allInstructorFiltersState);\n    const allDanceAdvanceLevelFilters = useRecoilValue(\n        allDanceAdvanceLevelFiltersState,\n    );\n    const allDayFilters = useRecoilValue(allDayFiltersState);\n    const setDayFilter = useSetRecoilState(dayFilterState);\n    const activeDayFilter = useRecoilValue(dayFilterState);\n\n    const allGroupStatusFilters = useRecoilValue(allGroupStatusFiltersState);\n    const setGroupStatusFilter = useSetRecoilState(groupStatusFilterState);\n    const activeGroupStatusFilter = useRecoilValue(groupStatusFilterState);\n\n    const isFiltersModalOpen = useRecoilValue(isFiltersModalOpenState);\n    const setIsFiltersModalOpen = useSetRecoilState(isFiltersModalOpenState);\n\n    const [selectedFilters] = React.useState<AllFilters>({\n        group_name: [],\n        level: [],\n        form: [],\n        days: [],\n        status: [],\n        styles: [],\n    });\n    const device = useIsDevice();\n\n    React.useEffect(() => {\n        props.onChange(selectedFilters);\n    }, [selectedFilters, props]);\n\n    return (\n        <Grid container spacing={2} alignItems='center'>\n            {device.isMobile && (\n                <Grid item xs={12} sm={2}>\n                    <Box display='flex' justifyContent='flex-end'>\n                        <IconButton\n                            icon={<FilterListIcon />}\n                            text='Filtruj'\n                            onClick={() =>\n                                setIsFiltersModalOpen((prev) => ({\n                                    ...prev,\n                                    isFiltersOpen: !prev.isFiltersOpen,\n                                }))\n                            }\n                        />\n                    </Box>\n                </Grid>\n            )}\n            {(isFiltersModalOpen.isFiltersOpen || !device.isMobile) && (\n                <>\n                    <Grow in>\n                        <Grid item xs={12} sm={2}>\n                            <Select\n                                label='Lokalizacja'\n                                values={allLocalizationFilter}\n                                value={activeLocalizationFilter.map(\n                                    (filter) => filter.name,\n                                )}\n                                onChange={handleLocalizationFilterChange}\n                                onReset={() => {\n                                    if (getMainFilter() === 'address') {\n                                        resetAllFilters();\n                                    } else {\n                                        handleLocalizationFilterChange(\n                                            [],\n                                            false,\n                                        );\n                                    }\n                                }}\n                            />\n                        </Grid>\n                    </Grow>{' '}\n                    <Grow in>\n                        <Grid item xs={12} sm={2}>\n                            <Select\n                                label='Zajęcia'\n                                values={allDanceNameFilters}\n                                value={activeDanceNameFilter.map(\n                                    (filter) => filter.name,\n                                )}\n                                onChange={handleDanceNameFilterChange}\n                                onReset={() => {\n                                    if (getMainFilter() === 'name') {\n                                        resetAllFilters();\n                                    } else {\n                                        handleDanceNameFilterChange([], false);\n                                    }\n                                }}\n                            />\n                        </Grid>\n                    </Grow>\n                    <Grow in>\n                        <Grid item xs={12} sm={3} md={3}>\n                            <Select\n                                label='Instruktor'\n                                values={allInstructorFilters}\n                                value={activeInstructorFilter.map(\n                                    (filter) => filter.name,\n                                )}\n                                onChange={handleInstructorFilterChange}\n                                onReset={() => {\n                                    if (getMainFilter() === 'instructor') {\n                                        resetAllFilters();\n                                    } else {\n                                        handleInstructorFilterChange([], false);\n                                    }\n                                }}\n                            />\n                        </Grid>\n                    </Grow>\n                    {/* <Grow in>\n                        <Grid item xs={12} sm={2}>\n                            <Select\n                                label='Forma ruchu'\n                                value={selectedFilters.form}\n                                values={props.defaultFilters.form}\n                                onChange={(value) =>\n                                    setSelectedFilters((prev) => ({\n                                        ...prev,\n                                        form: value,\n                                    }))\n                                }\n                            />\n                        </Grid>\n                            </Grow> */}\n                    {/*  */}\n                    {isShowMoreFiltersActive && (\n                        <>\n                            <Grow in>\n                                <Grid item xs={12} sm={3} md={3}>\n                                    <Select\n                                        label='Poziom zaawansowania'\n                                        values={allDanceAdvanceLevelFilters}\n                                        value={activeDanceAdvanceLevelFilter.map(\n                                            (filter) => filter.name,\n                                        )}\n                                        onChange={\n                                            handleDanceAdvanceLevelFilterChange\n                                        }\n                                        onReset={() => {\n                                            if (\n                                                getMainFilter() ===\n                                                'advanceLevel'\n                                            ) {\n                                                resetAllFilters();\n                                            } else {\n                                                handleDanceAdvanceLevelFilterChange(\n                                                    [],\n                                                    false,\n                                                );\n                                            }\n                                        }}\n                                    />\n                                </Grid>\n                            </Grow>\n                            <Grow in>\n                                <Grid item xs={12} sm={3} md={3}>\n                                    <Select\n                                        label='Status grupy'\n                                        values={allGroupStatusFilters}\n                                        value={activeGroupStatusFilter.map(\n                                            (filter) => filter.name,\n                                        )}\n                                        onChange={handleGroupStatusChange}\n                                        onReset={() => {\n                                            if (getMainFilter() === 'isOpen') {\n                                                resetAllFilters();\n                                            } else {\n                                                handleGroupStatusChange(\n                                                    [],\n                                                    false,\n                                                );\n                                            }\n                                        }}\n                                    />\n                                </Grid>\n                            </Grow>\n                            <Grow in>\n                                <Grid item xs={12} sm={3} md={2}>\n                                    <Select\n                                        label='Dzień tygodnia'\n                                        values={allDayFilters}\n                                        value={activeDayFilter.map(\n                                            (filter) => filter.name,\n                                        )}\n                                        onChange={handleDayFilterChange}\n                                        mapOptions={(value) =>\n                                            mapDayIdToString(value.name)\n                                        }\n                                        onReset={() => {\n                                            if (\n                                                getMainFilter() ===\n                                                'dayOfTheWeek'\n                                            ) {\n                                                resetAllFilters();\n                                            } else {\n                                                handleDayFilterChange(\n                                                    [],\n                                                    false,\n                                                );\n                                            }\n                                        }}\n                                    />\n                                </Grid>\n                            </Grow>\n\n                            {/* <Grow in>\n                                <Grid item xs={12} sm={2}>\n                                    <Select\n                                        label='Styl'\n                                        value={selectedFilters.styles}\n                                        values={props.defaultFilters.styles}\n                                        onChange={(value) =>\n                                            setSelectedFilters((prev) => ({\n                                                ...prev,\n                                                styles: value,\n                                            }))\n                                        }\n                                    />\n                                </Grid>\n                            </Grow>\n                            <Grow in>\n                                <Grid item xs={12} sm={2}>\n                                    <Select\n                                        label='Status'\n                                        value={selectedFilters.status}\n                                        onChange={(value) =>\n                                            setSelectedFilters((prev) => ({\n                                                ...prev,\n                                                status: value,\n                                            }))\n                                        }\n                                        values={props.defaultFilters.status}\n                                    />\n                                </Grid>\n                            </Grow>\n                            <Grow in>\n                                <Grid item xs={12} sm={2}>\n                                    <Select\n                                        label='Typ grupy'\n                                        value={[]}\n                                        onChange={(value) =>\n                                            setSelectedFilters((prev) => ({\n                                                ...prev,\n                                                type: value,\n                                            }))\n                                        }\n                                        values={props.defaultFilters.type}\n                                    />\n                                </Grid>\n                            </Grow> */}\n                        </>\n                    )}\n                    <Grid item xs={12} sm={2}>\n                        <TextButton\n                            text={\n                                isShowMoreFiltersActive\n                                    ? 'mniej filtrów'\n                                    : 'więcej filtrów'\n                            }\n                            onClick={() =>\n                                setIsShowMoreFiltersActive((props) => !props)\n                            }\n                        />\n                    </Grid>\n                </>\n            )}\n        </Grid>\n    );\n\n    function handleLocalizationFilterChange(\n        values: string[],\n        setFilter: boolean = true,\n    ) {\n        const found = allLocalizationFilter.filter((filter) =>\n            values.includes(filter.name),\n        );\n\n        if (found.length === 0 && getMainFilter() === 'address') {\n            resetMainFilter();\n        }\n\n        if (found) {\n            if (!getMainFilter() && setFilter) {\n                setMainFilter('address');\n            }\n            setLocalizationFilter(found);\n        }\n    }\n\n    function handleDanceNameFilterChange(\n        values: string[],\n        setFilter: boolean = true,\n    ) {\n        const found = allDanceNameFilters.filter((filter) =>\n            values.includes(filter.name),\n        );\n\n        if (found.length === 0 && getMainFilter() === 'name') {\n            resetMainFilter();\n        }\n\n        if (found) {\n            if (!getMainFilter() && setFilter) {\n                setMainFilter('name');\n            }\n            setDanceNameFilter(found);\n        }\n    }\n\n    function handleInstructorFilterChange(\n        values: string[],\n        setFilter: boolean = true,\n    ) {\n        const found = allInstructorFilters.filter((filter) =>\n            values.includes(filter.name),\n        );\n\n        if (found.length === 0 && getMainFilter() === 'instructor') {\n            resetMainFilter();\n        }\n\n        if (found) {\n            if (!getMainFilter() && setFilter) {\n                setMainFilter('instructor');\n            }\n            setInstructorFilter(found);\n        }\n    }\n\n    function handleDanceAdvanceLevelFilterChange(\n        values: string[],\n        setFilter: boolean = true,\n    ) {\n        const found = allDanceAdvanceLevelFilters.filter((filter) =>\n            values.includes(filter.name),\n        );\n\n        if (found.length === 0 && getMainFilter() === 'advanceLevel') {\n            resetMainFilter();\n        }\n\n        if (found) {\n            if (!getMainFilter() && setFilter) {\n                setMainFilter('advanceLevel');\n            }\n            setDanceAdvanceLevelFilter(found);\n        }\n    }\n\n    function handleGroupStatusChange(\n        values: string[],\n        setFilter: boolean = true,\n    ) {\n        const found = allGroupStatusFilters.filter((filter) => {\n            return values.includes(filter.name);\n        });\n\n        if (found.length === 0 && getMainFilter() === 'isOpen') {\n            resetMainFilter();\n        }\n\n        if (found) {\n            if (!getMainFilter() && setFilter) {\n                setMainFilter('isOpen');\n            }\n            setGroupStatusFilter(found);\n        }\n    }\n\n    function handleDayFilterChange(\n        values: string[],\n        setFilter: boolean = true,\n    ) {\n        const found = allDayFilters.filter((filter) =>\n            values.includes(filter.name),\n        );\n\n        if (found.length === 0 && getMainFilter() === 'dayOfTheWeek') {\n            resetMainFilter();\n        }\n\n        if (found) {\n            if (!getMainFilter() && setFilter) {\n                setMainFilter('dayOfTheWeek');\n            }\n            setDayFilter(found);\n        }\n    }\n\n    function resetAllFilters() {\n        resetMainFilter();\n        handleLocalizationFilterChange([], false);\n        handleDanceNameFilterChange([], false);\n        handleInstructorFilterChange([], false);\n        handleDanceAdvanceLevelFilterChange([], false);\n        handleGroupStatusChange([], false);\n        handleDayFilterChange([], false);\n    }\n}\n","import { DataType } from '../operations/queries/get_calendar_schedule';\n\nexport interface CalendarItemProp {\n    id: string;\n    name: string;\n    instructor: string;\n    isOpen: boolean;\n    advanceLevel: string;\n    dayOfTheWeek: number;\n    address: string;\n    startAt: string;\n    endAt: string;\n}\n\nexport class CalendarItem {\n    private constructor(private readonly prop: CalendarItemProp) {}\n\n    get id() {\n        return this.prop.id;\n    }\n\n    get isOpen() {\n        return this.prop.isOpen;\n    }\n\n    get name() {\n        return this.prop.name;\n    }\n\n    get instructor() {\n        return this.prop.instructor;\n    }\n\n    get advanceLevel() {\n        return this.prop.advanceLevel;\n    }\n\n    get dayOfTheWeek() {\n        return this.prop.dayOfTheWeek;\n    }\n\n    get address() {\n        return this.prop.address;\n    }\n\n    get startAt() {\n        return normalizeHour(this.prop.startAt);\n    }\n\n    getPropValue(name: string): string | number | boolean {\n        return this.prop[name as keyof CalendarItemProp];\n    }\n\n    get endAt() {\n        return normalizeHour(this.prop.endAt);\n    }\n\n    static createFromRaw(item: Partial<DataType>) {\n        return new CalendarItem(normalizeToProps(item));\n    }\n}\n\nfunction normalizeToProps(item: Partial<DataType>): CalendarItemProp {\n    return {\n        id: item.identyfikator_comp ?? '',\n        name: item.nazwa_grupy ?? '',\n        instructor: item.nauczyciel ?? '',\n        isOpen: item.nabor ?? false,\n        advanceLevel: item.poziom_zaawansowania_nazwa ?? '',\n        dayOfTheWeek: item.id_dzien ?? 1,\n        address: item.budynek ?? '',\n        startAt: item.czas_poczatek ?? '',\n        endAt: item.czas_koniec ?? '',\n    };\n}\n\nfunction normalizeHour(simpleDate: string): string {\n    const [hour, minutes] = simpleDate.split(':');\n\n    return `${hour}:${minutes}`;\n}\n","import { CalendarItem } from './calendar_item';\nimport { AllFilters } from '../filters';\n\nexport class Day {\n    private _filters: Omit<AllFilters, 'days'> = {\n        group_name: [],\n        level: [],\n        form: [],\n        status: [],\n        styles: [],\n    };\n\n    private constructor(\n        private readonly props: { name: string; cards: CalendarItem[] },\n    ) {}\n\n    get name(): string {\n        return this.props.name;\n    }\n\n    get cards(): CalendarItem[] {\n        return this.props.cards;\n    }\n\n    isEmpty(): boolean {\n        return this.props.cards.length === 0;\n    }\n\n    addCard(card: CalendarItem): void {\n        this.props.cards.push(card);\n    }\n\n    select({ group_name }: { group_name?: string[] }): Day {\n        const filtredCards = this.props.cards.filter((c) => {\n            if (group_name && group_name.length > 0) {\n                return group_name.includes(c.name);\n            }\n\n            return true;\n        });\n\n        return Day.create(this.props.name, filtredCards);\n    }\n\n    get filters(): Omit<AllFilters, 'days'> {\n        return this._filters;\n    }\n\n    setFilters(filters: AllFilters) {\n        this._filters = filters;\n    }\n\n    getCardsByHours() {\n        return this.props.cards.reduce((acc, card) => {\n            const { startAt } = card;\n\n            if (acc[startAt]) {\n                return { ...acc, [startAt]: [...acc[startAt], card] };\n            }\n\n            return { ...acc, [startAt]: [card] };\n        }, {} as { [index: string]: CalendarItem[] });\n    }\n\n    static create(name: string, cards: CalendarItem[]): Day {\n        return new Day({ name, cards });\n    }\n}\n","import { pick, reduce, mapValues } from 'lodash';\nimport { CalendarItem } from './calendar_item';\nimport { Day } from './day';\n\nexport class CalendarScreen {\n    private constructor(\n        private readonly props: {\n            cards: CalendarItem[];\n        },\n    ) {}\n\n    get cards(): CalendarItem[] {\n        return this.props.cards;\n    }\n\n    get days(): { [index: string]: Day } {\n        return this.props.cards.reduce((acc, card) => {\n            const { dayOfTheWeek } = card;\n\n            if (acc[dayOfTheWeek + '']) {\n                const day = acc[dayOfTheWeek + ''];\n                day.addCard(card);\n\n                return { ...acc, [dayOfTheWeek]: day };\n            }\n\n            const day = Day.create(dayOfTheWeek + '', [card]);\n\n            return { ...acc, [dayOfTheWeek]: day };\n        }, {} as { [index: string]: Day });\n    }\n\n    getSelectedDays(options: { selected: string[]; group_name?: string[] }) {\n        if (options.selected.length === 0) return this.days;\n\n        return pick(this.days, options.selected);\n    }\n\n    getSuitableSchedule(options: { selected: string[] }) {\n        const pickedDays = this.getSelectedDays(options);\n\n        return reduce(\n            pickedDays,\n            countMinSchedule,\n            {} as { [index: string]: number },\n        );\n    }\n\n    static create(cards: CalendarItem[]): CalendarScreen {\n        return new CalendarScreen({ cards });\n    }\n}\n\nfunction countMinSchedule(acc: { [index: string]: number }, day: Day) {\n    const dailyHours = mapValues(\n        day.getCardsByHours(),\n        (items) => items.length,\n    );\n\n    Object.entries(dailyHours).forEach(([key, value]) => {\n        const mainAccHour = acc[key];\n\n        if (!mainAccHour || mainAccHour < value) {\n            acc[key] = value;\n        }\n    });\n\n    return { ...acc };\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { CalendarScreen } from './domains/calendar_screen';\nimport { AllFilters } from './filters';\n\ninterface LegendProps {\n    calendar: CalendarScreen;\n    filters: AllFilters;\n}\n\nexport function Legend(props: LegendProps) {\n    const classes = useStyles();\n    const [hours, setHours] = React.useState<\n        Array<{ measurement: DOMRect; name: string }>\n    >([]);\n\n    React.useEffect(() => {\n        setTimeout(() => {\n            setHours(\n                [\n                    ...Array.from(\n                        document.querySelector('.singleRow > *')?.children ||\n                            [],\n                    ),\n                ].map((e) => {\n                    const measurement = e.getBoundingClientRect();\n\n                    return {\n                        measurement,\n                        name: e.classList[2],\n                    };\n                }),\n            );\n        }, 1000);\n    }, [props.calendar, props.filters.days.length]);\n\n    return (\n        <div className={classes.root2}>\n            {hours.map((h) => {\n                return (\n                    <div\n                        className={classes.root}\n                        style={{ height: h.measurement.height }}\n                        key={h.name}\n                    >\n                        {h.name}\n                    </div>\n                );\n            })}\n        </div>\n    );\n}\n\nconst useStyles = makeStyles({\n    root: {\n        color: 'rgba(0,0,0,.54)',\n        marginRight: 8,\n        cursor: 'default',\n        userSelect: 'none',\n    },\n    root2: {\n        display: 'flex',\n        flexDirection: 'column',\n        marginTop: 35,\n    },\n});\n","import React from 'react';\nimport { Sticky } from 'react-sticky';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { Box, Button, Grid, makeStyles } from '@material-ui/core';\nimport { FilterList as FilterListIcon } from '@material-ui/icons';\nimport { useIsDevice } from '../useBreakpoints';\nimport { isFilterActive } from '../selectors';\nimport { IconButton } from './icon_button';\nimport { isFiltersModalOpenState } from '../atoms';\n\nexport const MenuContext = React.createContext({\n    menuValue: [] as { x?: number; title?: string | null }[],\n    setMenuValue: (value: { x?: number; title?: string | null }[]) => {},\n});\n\nexport function StickyHeader() {\n    const menuTitles = React.useContext(MenuContext);\n    const classes = useStyles();\n    const device = useIsDevice();\n    const isActiveFilter = useRecoilValue(isFilterActive);\n    const setIsFiltersModalOpen = useSetRecoilState(isFiltersModalOpenState);\n\n    if (device.isSmallMobile && isActiveFilter) return null;\n\n    return (\n        <Sticky topOffset={100} disableCompensation>\n            {({ style, isSticky, distanceFromTop }) => {\n                const a = menuTitles.menuValue.map((e) => {\n                    return { x: e.x || 0, title: e.title };\n                });\n\n                const result = a.filter((f, index, acc) => {\n                    const currentScroll = distanceFromTop * -1;\n                    const currentElement = acc[index];\n                    // const nextElement = acc[index + 1];\n\n                    if (currentScroll < acc[0].x) return true;\n\n                    // if (!nextElement) return true;\n\n                    return currentElement.x < currentScroll;\n                });\n\n                const filtredTitles = device.isSmallMobile\n                    ? result\n                        ? result\n                        : []\n                    : menuTitles.menuValue;\n\n                return (\n                    <header style={{ ...style, zIndex: 1000, marginRight: 8 }}>\n                        {isSticky && (\n                            <Box display='flex' mr={1}>\n                                <Box width='54px'>&nbsp;</Box>\n                                <Box\n                                    pt={1}\n                                    pb={1}\n                                    display='flex'\n                                    className={classes.container}\n                                >\n                                    <Grid\n                                        container\n                                        direction={\n                                            device.isSmallMobile\n                                                ? 'row'\n                                                : 'column'\n                                        }\n                                    >\n                                        <Grid item xs={9} sm={12}>\n                                            <Box\n                                                display={\n                                                    device.isSmallMobile\n                                                        ? 'block'\n                                                        : 'flex'\n                                                }\n                                            >\n                                                {filtredTitles.map((m) => {\n                                                    return device.isSmallMobile ? (\n                                                        <Box\n                                                            width={\n                                                                device.isSmallMobile\n                                                                    ? '100%'\n                                                                    : 1 /\n                                                                      Object.entries(\n                                                                          menuTitles,\n                                                                      ).length\n                                                            }\n                                                            className={\n                                                                classes.tagName\n                                                            }\n                                                        >\n                                                            <Button\n                                                                onClick={() => {\n                                                                    window.scrollTo(\n                                                                        0,\n                                                                        m.x!,\n                                                                    );\n                                                                }}\n                                                            >\n                                                                {m.title}\n                                                            </Button>\n                                                        </Box>\n                                                    ) : (\n                                                        <Box\n                                                            width={\n                                                                device.isSmallMobile\n                                                                    ? '100%'\n                                                                    : 1 /\n                                                                      Object.entries(\n                                                                          menuTitles,\n                                                                      ).length\n                                                            }\n                                                            className={\n                                                                classes.tagName\n                                                            }\n                                                            onClick={() => {\n                                                                window.scrollTo(\n                                                                    0,\n                                                                    m.x!,\n                                                                );\n                                                            }}\n                                                        >\n                                                            {m.title}\n                                                        </Box>\n                                                    );\n                                                })}\n                                            </Box>\n                                        </Grid>\n                                        {device.isSmallMobile && (\n                                            <Grid item xs={3}>\n                                                <Box mr={1}>\n                                                    <IconButton\n                                                        icon={\n                                                            <FilterListIcon />\n                                                        }\n                                                        text='Filtruj'\n                                                        onClick={() => {\n                                                            window.scrollTo(\n                                                                0,\n                                                                0,\n                                                            );\n                                                            setIsFiltersModalOpen(\n                                                                (prev) => ({\n                                                                    ...prev,\n                                                                    isFiltersOpen: true,\n                                                                }),\n                                                            );\n                                                        }}\n                                                    />\n                                                </Box>\n                                            </Grid>\n                                        )}\n                                    </Grid>\n                                </Box>\n                            </Box>\n                        )}\n                    </header>\n                );\n            }}\n        </Sticky>\n    );\n}\n\nconst useStyles = makeStyles({\n    container: {\n        background: '#ffffff',\n        boxShadow: '0px 0px 8px 10px #ffffff',\n        zIndex: 9999999999,\n        width: '100%',\n    },\n    tagName: {\n        fontSize: 24,\n        color: 'rgba(0,0,0,.54)',\n        cursor: 'PropTypes.instanceOf().isRequired,',\n        userSelect: 'none',\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n    },\n});\n","import { Skeleton } from '@material-ui/lab';\nimport { Box } from '@material-ui/core';\nimport React from 'react';\nimport { Grid, Card, makeStyles, Typography } from '@material-ui/core';\nimport clsx from 'clsx';\n\nexport function SkeletonCard() {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.element}>\n            <Card className={classes.card}>\n                <Grid container>\n                    <Grid item xs={12} className={classes.title}>\n                        <div className={classes.innerTitle}>\n                            <Typography variant='caption'>\n                                {true ? <Skeleton /> : 'caption'}\n                            </Typography>\n                        </div>\n                    </Grid>\n                </Grid>\n                <Grid container>\n                    <Grid item xs={12} className={clsx(classes.attribute)}>\n                        {/* {[startHour, startMinutes].join(':')}-\n                        {[endHour, endMinutes].join(':')} */}\n                        <Box width='30%' mr={1}>\n                            <Typography variant='subtitle2'>\n                                <Skeleton\n                                // animation='wave'\n                                // height={10}\n                                // style={{ marginBottom: 0, marginRight: 8 }}\n                                // width='30%'\n                                />\n                            </Typography>\n                        </Box>\n                        <Box width='30%'>\n                            <Typography variant='subtitle2'>\n                                <Skeleton\n                                // animation='wave'\n                                // height={10}\n                                // style={{ marginBottom: 0 }}\n                                // width='30%'\n                                />\n                            </Typography>\n                        </Box>\n                    </Grid>\n                </Grid>\n                <Grid container justify='space-between'>\n                    <Grid item xs={12} className={classes.attribute}>\n                        {/* {card.advanceLevel} */}\n                        {/* <Skeleton\n                            animation='wave'\n                            height={12}\n                            style={{ marginTop: 8 }}\n                            width='60%'\n                        /> */}\n                        <Box width='60%'>\n                            <Typography variant='subtitle1'>\n                                <Skeleton\n                                // animation='wave'\n                                // height={10}\n                                // style={{ marginBottom: 0 }}\n                                // width='30%'\n                                />\n                            </Typography>\n                        </Box>\n                    </Grid>\n                </Grid>\n                <Grid container>\n                    <Grid item className={classes.attribute}>\n                        <Skeleton\n                            // animation='wave'\n                            // variant='circle'\n                            width={40}\n                            height={30}\n                        />\n                    </Grid>\n                </Grid>\n            </Card>\n        </div>\n    );\n}\n\nconst useStyles = makeStyles({\n    root: {\n        flex: 1,\n    },\n    element: {\n        padding: '12px 12px 0 0',\n        display: 'flex',\n        cursor: 'default',\n        // minWidth: 200,\n    },\n    card: {\n        // borderLeft: '3px solid #02B2ED',\n        padding: `8px 0 0 0`,\n        width: '100%',\n        height: 120,\n    },\n    title: {\n        fontSize: 12,\n        marginBottom: 8,\n    },\n    innerTitle: {\n        marginLeft: 8,\n        marginRight: 8,\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        // height: 30,\n    },\n    dateSpan: {\n        fontSize: 9,\n        color: 'rgba(0,0,0,.54)',\n    },\n    attribute: {\n        fontSize: 9,\n        marginBottom: 8,\n        marginLeft: 8,\n        whiteSpace: 'nowrap',\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        display: 'flex',\n    },\n    button: {\n        color: '#1976D2',\n        fontSize: 9,\n    },\n    tagName: {\n        fontSize: 24,\n        color: 'rgba(0,0,0,.54)',\n        cursor: 'default',\n        userSelect: 'none',\n        height: 30,\n    },\n});\n","import { makeStyles, Step, StepLabel, Stepper, Theme } from '@material-ui/core';\n\ninterface RegisterFormStepperProps {\n    activeStep: number;\n}\n\nexport function RegisterFormStepper(props: RegisterFormStepperProps) {\n    const classes = useStyles();\n    const steps = [\n        'Rejestracja',\n        'Wybór biletu',\n        'Płatność',\n        'Dane szczegółowe',\n    ];\n\n    return (\n        <Stepper\n            activeStep={props.activeStep}\n            alternativeLabel\n            classes={{ root: classes.root }}\n        >\n            {steps.map((label) => (\n                <Step key={label}>\n                    <StepLabel>\n                        <div>{label}</div>\n                    </StepLabel>\n                </Step>\n            ))}\n        </Stepper>\n    );\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        paddingLeft: 0,\n        paddingRight: 0,\n        '& svg text, & svg circle': {\n            fill: '#fff',\n            r: 11,\n        },\n        '& svg circle': {\n            stroke: theme.palette.primary.main,\n        },\n        '& svg.MuiStepIcon-active circle': {\n            fill: theme.palette.primary.main,\n        },\n        '& svg:not(.MuiStepIcon-active) .MuiStepIcon-text': {\n            fill: theme.palette.primary.main,\n        },\n    },\n}));\n","export function minLength(value: string, limit: number) {\n    return value.length >= limit;\n}\n\nexport function notEmpty(value: string) {\n    return !!value;\n}\n\nexport function validateEmail(email: string) {\n    const re = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n\n    return re.test(String(email).toLowerCase());\n}\n","import React from 'react';\nimport { TextField } from '@material-ui/core';\n\ninterface TextFieldProps {\n    label: string;\n    value: string;\n    setValue: (value: string) => void;\n    setIsFocused: (value: boolean) => void;\n    isPristine: boolean;\n    setIsPristine: (value: boolean) => void;\n    isValid: boolean;\n    errorMessage?: string;\n    multiline?: boolean;\n    inputComponent?: React.ReactNode;\n}\n\nexport function LabeledTextField(props: TextFieldProps) {\n    return (\n        <TextField\n            variant='outlined'\n            fullWidth\n            multiline={props.multiline}\n            size='small'\n            label={props.label}\n            rows={props.multiline ? 7 : undefined}\n            value={props.value}\n            onChange={(e) => props.setValue(e.target.value)}\n            onFocus={() => {\n                props.setIsFocused(true);\n            }}\n            onBlur={() => {\n                props.setIsPristine(false);\n                props.setIsFocused(false);\n            }}\n            InputLabelProps={{\n                shrink: true,\n            }}\n            error={!props.isPristine && !props.isValid}\n            helperText={\n                !props.isPristine && !props.isValid && props.errorMessage\n            }\n        />\n    );\n}\n\nexport function useTextField(options: {\n    initialValue: string;\n    label: string;\n    validator?: (value: string) => boolean;\n    errorMessage?: string;\n    inputComponent?: React.ReactNode;\n    multiline?: boolean;\n}) {\n    const [value, setValue] = React.useState(options.initialValue);\n    const [isFocused, setIsFocused] = React.useState(false);\n    const [isPristine, setIsPristine] = React.useState(true);\n    const isValid = React.useMemo(\n        () => (options.validator ? options.validator(value) : true),\n        [value, options],\n    );\n    return {\n        value,\n        setValue,\n        isFocused,\n        setIsFocused,\n        isValid,\n        isPristine,\n        setIsPristine,\n        inputComponent: options.inputComponent,\n        validator: options.validator,\n        errorMessage: options.errorMessage,\n        label: options.label,\n        multiline: options.multiline,\n        reset: () => setValue(options.initialValue),\n    };\n}\n","import React from 'react';\nimport {\n    FormControl,\n    FormHelperText,\n    InputLabel,\n    OutlinedInput,\n} from '@material-ui/core';\n\ninterface TextFieldProps {\n    label: string;\n    value: string;\n    setValue: (value: string) => void;\n    setIsFocused: (value: boolean) => void;\n    isPristine: boolean;\n    setIsPristine: (value: boolean) => void;\n    isValid: boolean;\n    errorMessage?: string;\n    multiline?: boolean;\n    inputComponent?: React.ReactNode;\n}\n\nexport function PhoneTextField(props: TextFieldProps) {\n    return (\n        <FormControl\n            variant='outlined'\n            size='small'\n            fullWidth\n            error={!props.isPristine && !props.isValid}\n        >\n            <InputLabel htmlFor='phone'>{props.label}</InputLabel>\n            <OutlinedInput\n                label={props.label}\n                value={props.value}\n                onChange={(e) => props.setValue(e.target.value)}\n                onFocus={() => {\n                    props.setIsFocused(true);\n                }}\n                id='phone'\n                onBlur={() => {\n                    props.setIsPristine(false);\n                    props.setIsFocused(false);\n                }}\n                inputComponent={props.inputComponent as any}\n            />\n            <FormHelperText id='phone'>\n                {!props.isPristine && !props.isValid && props.errorMessage}\n            </FormHelperText>\n        </FormControl>\n    );\n}\n\nexport function usePhoneTextField(options: {\n    initialValue: string;\n    label: string;\n    validator?: (value: string) => boolean;\n    errorMessage?: string;\n    inputComponent?: React.ReactNode;\n    multiline?: boolean;\n}) {\n    const [value, setValue] = React.useState(options.initialValue);\n    const [isFocused, setIsFocused] = React.useState(false);\n    const [isPristine, setIsPristine] = React.useState(true);\n    const isValid = React.useMemo(\n        () => (options.validator ? options.validator(value) : true),\n        [value, options],\n    );\n    return {\n        value,\n        setValue,\n        isFocused,\n        setIsFocused,\n        isValid,\n        isPristine,\n        setIsPristine,\n        inputComponent: options.inputComponent,\n        validator: options.validator,\n        errorMessage: options.errorMessage,\n        label: options.label,\n        multiline: options.multiline,\n        reset: () => setValue(options.initialValue),\n    };\n}\n","import React from 'react';\nimport {\n    FormControl,\n    FormHelperText,\n    InputLabel,\n    MenuItem,\n    Select,\n} from '@material-ui/core';\n\ninterface SelectFieldProps {\n    label: string;\n    options: Array<{ value: string; label: string }>;\n    value: string;\n    setValue: (value: string) => void;\n    setIsFocused: (value: boolean) => void;\n    isPristine: boolean;\n    setIsPristine: (value: boolean) => void;\n    isValid: boolean;\n    errorMessage?: string;\n}\n\nexport function SelectField(props: SelectFieldProps) {\n    return (\n        <FormControl\n            variant='outlined'\n            size='small'\n            fullWidth\n            onFocus={() => {\n                props.setIsFocused(true);\n            }}\n            onBlur={() => {\n                props.setIsPristine(false);\n                props.setIsFocused(false);\n            }}\n            error={!props.isPristine && !props.isValid}\n        >\n            <InputLabel id={props.label}>{props.label}</InputLabel>\n            <Select\n                value={props.value}\n                labelId={props.label}\n                label={props.label}\n                onChange={(e) => props.setValue(e.target.value as string)}\n            >\n                {props.options.map(({ value, label }) => (\n                    <MenuItem key={value} value={value}>\n                        {label}\n                    </MenuItem>\n                ))}\n            </Select>\n            <FormHelperText id={props.label}>\n                {!props.isPristine && !props.isValid && props.errorMessage}\n            </FormHelperText>\n        </FormControl>\n    );\n}\n\nexport function useSelectField(options: {\n    initialValue: string;\n    label: string;\n    options: Array<{ value: string; label: string }>;\n    validator?: (value: string) => boolean;\n    errorMessage?: string;\n    inputComponent?: React.ReactNode;\n    multiline?: boolean;\n}) {\n    const [value, setValue] = React.useState(options.initialValue);\n    const [isFocused, setIsFocused] = React.useState(false);\n    const [isPristine, setIsPristine] = React.useState(true);\n    const isValid = React.useMemo(\n        () => (options.validator ? options.validator(value) : true),\n        [value, options],\n    );\n    return {\n        value,\n        setValue,\n        isFocused,\n        setIsFocused,\n        isValid,\n        isPristine,\n        setIsPristine,\n        options: options.options,\n        validator: options.validator,\n        errorMessage: options.errorMessage,\n        label: options.label,\n        reset: () => setValue(options.initialValue),\n    };\n}\n","import React from 'react';\nimport { TextField } from '@material-ui/core';\n\ninterface DateFieldProps {\n    label: string;\n    value: string;\n    setValue: (value: string) => void;\n    setIsFocused: (value: boolean) => void;\n    isPristine: boolean;\n    setIsPristine: (value: boolean) => void;\n    isValid: boolean;\n    errorMessage?: string;\n}\n\nexport function DateField(props: DateFieldProps) {\n    return (\n        <TextField\n            type='date'\n            variant='outlined'\n            fullWidth\n            size='small'\n            label='data urodzenia'\n            value={props.value}\n            onChange={(e) => props.setValue(e.target.value)}\n            onFocus={() => {\n                props.setIsFocused(true);\n            }}\n            onBlur={() => {\n                props.setIsPristine(false);\n                props.setIsFocused(false);\n            }}\n            InputLabelProps={{\n                shrink: true,\n            }}\n            error={!props.isPristine && !props.isValid}\n            helperText={\n                !props.isPristine && !props.isValid && props.errorMessage\n            }\n        />\n    );\n}\n\nexport function useDateField(options: {\n    initialValue: string;\n    label: string;\n    validator?: (value: string) => boolean;\n    errorMessage?: string;\n}) {\n    const [value, setValue] = React.useState(options.initialValue);\n    const [isFocused, setIsFocused] = React.useState(false);\n    const [isPristine, setIsPristine] = React.useState(true);\n    const isValid = React.useMemo(\n        () => (options.validator ? options.validator(value) : true),\n        [value, options],\n    );\n    return {\n        value,\n        setValue,\n        isFocused,\n        setIsFocused,\n        isValid,\n        isPristine,\n        setIsPristine,\n        validator: options.validator,\n        errorMessage: options.errorMessage,\n        label: options.label,\n        reset: () => setValue(options.initialValue),\n    };\n}\n","import React from 'react';\nimport {\n    createStyles,\n    makeStyles,\n    Theme,\n    withStyles,\n    WithStyles,\n} from '@material-ui/core/styles';\nimport ReCAPTCHA from 'react-google-recaptcha';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\nimport MuiDialogContent from '@material-ui/core/DialogContent';\nimport MuiDialogActions from '@material-ui/core/DialogActions';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Typography from '@material-ui/core/Typography';\nimport MaskedInput from 'react-text-mask';\nimport { useRecoilValue } from 'recoil';\nimport { selectedCardFilterState } from '../selectors';\nimport { Box, Divider, Grid } from '@material-ui/core';\nimport { CalendarCard } from '../components/card/card';\nimport { RegisterFormStepper } from './register_form_stepper';\nimport {\n    minLength,\n    validateEmail,\n    notEmpty,\n} from '../utils/form_validations_utils';\nimport {\n    LabeledTextField,\n    useTextField,\n} from '../components/labeled_textfield';\nimport {\n    PhoneTextField,\n    usePhoneTextField,\n} from '../components/phone_textfield';\nimport { SelectField, useSelectField } from '../components/selectfield';\nimport { DateField, useDateField } from '../components/datefield';\nimport { useRegisterUser } from '../operations/mutations/register_user';\n\nconst styles = (theme: Theme) =>\n    createStyles({\n        root: {\n            margin: 0,\n            padding: theme.spacing(2),\n            display: 'flex',\n            justifyContent: 'center',\n        },\n        closeButton: {\n            position: 'absolute',\n            right: theme.spacing(1),\n            top: theme.spacing(1),\n            color: theme.palette.grey[500],\n        },\n    });\n\nexport interface DialogTitleProps extends WithStyles<typeof styles> {\n    id: string;\n    children: React.ReactNode;\n    onClose: () => void;\n}\n\nconst DialogTitle = withStyles(styles)((props: DialogTitleProps) => {\n    const { children, classes, onClose, ...other } = props;\n    return (\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\n            <Typography variant='h6'>{children}</Typography>\n            {onClose ? (\n                <IconButton\n                    aria-label='close'\n                    className={classes.closeButton}\n                    onClick={onClose}\n                >\n                    <CloseIcon />\n                </IconButton>\n            ) : null}\n        </MuiDialogTitle>\n    );\n});\n\nconst DialogContent = withStyles((theme: Theme) => ({\n    root: {\n        padding: theme.spacing(2),\n    },\n}))(MuiDialogContent);\n\nconst DialogActions = withStyles((theme: Theme) => ({\n    root: {\n        margin: 0,\n        padding: theme.spacing(1),\n    },\n}))(MuiDialogActions);\n\ninterface Props {\n    isOpen: boolean;\n    onClose: () => void;\n}\n\nexport function DanceBuyDialog(props: Props) {\n    const classes = useStyles();\n    const [isCaptchaValid, setIsCaptchaValid] = React.useState(false);\n    const { isLoading, registerUser } = useRegisterUser();\n    const selectedCard = useRecoilValue(selectedCardFilterState);\n    const firstnameField = useTextField({\n        initialValue: '',\n        label: 'imie',\n        errorMessage: 'Imie powinno mieć co najmniej 2 znaki',\n        validator: (value) => minLength(value, 2),\n    });\n    const lastnameField = useTextField({\n        initialValue: '',\n        label: 'nazwisko',\n        errorMessage: 'Nazwisko powinno mieć co najmniej 3 znaki',\n        validator: (value) => minLength(value, 3),\n    });\n    const emailField = useTextField({\n        initialValue: '',\n        label: 'email',\n        errorMessage: 'Nieprawidłowy adres email',\n        validator: validateEmail,\n    });\n    const opinionField = useTextField({\n        initialValue: '',\n        label: 'Skąd się o nas dowiedziałeś?',\n        multiline: true,\n    });\n    const phoneField = usePhoneTextField({\n        initialValue: '',\n        label: 'telefon',\n        inputComponent: TextMaskCustom,\n        errorMessage: 'Nieprawidłowy numer telefonu',\n        validator: (value) => {\n            return value\n                .split(' ')\n                .every((partialValue) => partialValue.trim().length === 3);\n        },\n    });\n    const sexField = useSelectField({\n        initialValue: '',\n        label: 'płeć',\n        options: [\n            {\n                value: 'k',\n                label: 'Kobieta',\n            },\n            {\n                value: 'm',\n                label: 'Mężczyzna',\n            },\n        ],\n        errorMessage: 'Nie wybrano płci',\n        validator: notEmpty,\n    });\n    const dateField = useDateField({\n        initialValue: '',\n        label: 'data urodzenia',\n        errorMessage: 'Data urodzenia nie moe być pusta',\n        validator: notEmpty,\n    });\n\n    const recaptchaRef: any = React.createRef();\n\n    const isValid =\n        firstnameField.isValid &&\n        lastnameField.isValid &&\n        emailField.isValid &&\n        phoneField.isValid &&\n        dateField.isValid &&\n        sexField.isValid &&\n        isCaptchaValid;\n\n    if (!selectedCard) return null;\n\n    return (\n        <Dialog\n            aria-labelledby='customized-dialog-title'\n            open={props.isOpen}\n            classes={{ root: classes.root, paper: classes.content }}\n            maxWidth='md'\n        >\n            <DialogTitle id='customized-dialog-title' onClose={handleClose}>\n                Rejestracja\n            </DialogTitle>\n            <DialogContent className={classes.content}>\n                <Grid container>\n                    <Grid item xs={12} md={4}>\n                        <CalendarCard card={selectedCard} viewOnly />\n                    </Grid>\n                    <Grid item xs={1}>\n                        <Box\n                            display='flex'\n                            justifyContent='center'\n                            width='100%'\n                            height='100%'\n                        >\n                            <Divider orientation='vertical' />\n                        </Box>\n                    </Grid>\n                    <Grid item xs={12} md={7}>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12}>\n                                <RegisterFormStepper activeStep={0} />\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <LabeledTextField {...firstnameField} />\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <LabeledTextField {...lastnameField} />\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <DateField {...dateField} />\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <SelectField {...sexField} />\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <LabeledTextField {...emailField} />\n                            </Grid>\n                            <Grid item xs={12} md={6}>\n                                <PhoneTextField {...phoneField} />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <LabeledTextField {...opinionField} />\n                            </Grid>\n                            <Grid item xs={12}>\n                                <form\n                                    onSubmit={() => {\n                                        recaptchaRef.current.execute();\n                                    }}\n                                >\n                                    <ReCAPTCHA\n                                        ref={recaptchaRef}\n                                        sitekey='6LdaJGAaAAAAABaqdTOVlAolmsatP0bKQxx1cJs6'\n                                        onChange={(value) => {\n                                            setIsCaptchaValid(!!value);\n                                        }}\n                                    />\n                                </form>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                <Button\n                    autoFocus\n                    onClick={handleNextClick}\n                    color='primary'\n                    disabled={!isValid}\n                >\n                    Dalej {isLoading && 'ffff'}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n\n    function handleClose() {\n        props.onClose();\n    }\n\n    function handleNextClick() {\n        if (!selectedCard) return;\n\n        const createUserDto = {\n            item: selectedCard.id,\n            email: emailField.value,\n            firstname: firstnameField.value,\n            lastname: lastnameField.value,\n            opinion: opinionField.value,\n            phone: phoneField.value,\n            sex: sexField.value,\n            birthDate: dateField.value,\n        };\n\n        registerUser(createUserDto).then((e) => console.log(e));\n    }\n}\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        '& .MuiBackdrop-root': {\n            background: 'rgba(255,255,255,.7)',\n        },\n        paddingLeft: 0,\n    },\n    content: {\n        // width: '100%',\n    },\n});\n\ninterface TextMaskCustomProps {\n    inputRef: (ref: HTMLInputElement | null) => void;\n}\n\nfunction TextMaskCustom(props: TextMaskCustomProps) {\n    const { inputRef, ...other } = props;\n\n    return (\n        <MaskedInput\n            {...other}\n            ref={(ref: any) => {\n                inputRef(ref ? ref.inputElement : null);\n            }}\n            mask={[\n                /\\d/,\n                /\\d/,\n                /\\d/,\n                ' ',\n                /\\d/,\n                /\\d/,\n                /\\d/,\n                ' ',\n                /\\d/,\n                /\\d/,\n                /\\d/,\n            ]}\n            placeholderChar={'\\u2000'}\n            showMask\n        />\n    );\n}\n","import React from 'react';\nimport axios from 'axios';\n\nexport interface RegisterUserInput {\n    item: string;\n    email: string;\n    firstname: string;\n    lastname: string;\n    opinion: string;\n    phone: string;\n    sex: string;\n    birthDate: string;\n}\n\nexport interface RegisterUser {\n    token: string;\n}\n\nexport function useRegisterUser() {\n    const [results, setResults] = React.useState<RegisterUser | null>(null);\n    const [isLoading, setIsLoading] = React.useState(false);\n\n    return {\n        results,\n        isLoading,\n        registerUser: (value: RegisterUserInput) => {\n            setIsLoading(true);\n\n            return axios\n                .post<RegisterUser>(\n                    `${process.env.REACT_APP_CALENDAR_API}/register`,\n                    value,\n                )\n                .then((response) => {\n                    setIsLoading(false);\n                    setResults(response.data);\n\n                    console.log(response);\n                    localStorage.setItem('esens_token', response.data.token);\n\n                    return response.data;\n                });\n        },\n    };\n}\n","import React from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { Box, Grid } from '@material-ui/core';\nimport { StickyContainer } from 'react-sticky';\nimport FlipMove from 'react-flip-move';\nimport clsx from 'clsx';\nimport { Row } from './row';\nimport { Filters, AllFilters } from './filters';\nimport { useGetCalendarSchedule } from './operations/queries/get_calendar_schedule';\nimport { usePossibleFilters } from './use_possible_filters';\nimport { useCalendarCreator2 } from './use_calendar_creator';\nimport { mapDayIdToString } from './utils/mapDayIdToName';\nimport { useIsDevice } from './useBreakpoints';\nimport { Legend } from './legend';\nimport { MenuContext, StickyHeader } from './components/header';\nimport { SkeletonCard } from './components/skeleton_card';\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\nimport { filteredCalendarItemsState } from './selectors';\nimport { EmptyCard } from './components/card/empty_card';\nimport { DanceBuyDialog } from './dance_buy_dialog/dance_buy_dialog';\nimport { selectedCardState } from './atoms';\n\nexport function Calendar() {\n    const classes = useStyles();\n    const { results, isLoading } = useGetCalendarSchedule();\n    const filters = usePossibleFilters(results);\n    const filtredState = useRecoilValue(filteredCalendarItemsState);\n    const [selectedFilters, setSelectedFilters] = React.useState<AllFilters>({\n        group_name: [],\n        level: [],\n        form: [],\n        days: [],\n        status: [],\n        styles: [],\n    });\n    const { calendarScreen } = useCalendarCreator2(filtredState);\n    const device = useIsDevice();\n    const menuContext = React.useContext(MenuContext);\n    const selectedCard = useRecoilValue(selectedCardState);\n    const setSelectedCard = useSetRecoilState(selectedCardState);\n\n    const days =\n        selectedFilters.days.length === 0\n            ? calendarScreen.days\n            : calendarScreen.getSelectedDays({\n                  selected: selectedFilters.days,\n                  group_name: selectedFilters.group_name,\n              });\n\n    React.useEffect(() => {\n        setTimeout(() => {\n            if (!device.isSmallMobile) {\n                menuContext.setMenuValue(\n                    Object.keys(days).map((d) => ({\n                        title: mapDayIdToString(d),\n                    })),\n                );\n            } else {\n                const elems = Array.from(\n                    document.querySelectorAll('.day-row'),\n                ).map((e) => ({\n                    x: e.getBoundingClientRect().top,\n                    title: e.textContent,\n                }));\n\n                menuContext.setMenuValue(elems);\n            }\n        }, 1000);\n\n        // eslint-disable-next-line\n    }, [filtredState, Object.keys(days).length, device.isSmallMobile]);\n\n    return (\n        <StickyContainer>\n            <StickyHeader />\n            <DanceBuyDialog\n                isOpen={selectedCard.length > 0}\n                onClose={() => setSelectedCard([])}\n            />\n            <div className={classes.root}>\n                <Grid container>\n                    <Grid item xs={12}></Grid>\n                    <Grid item xs={12}>\n                        <Box m={3}>\n                            <Filters\n                                defaultFilters={filters}\n                                onChange={(value) => setSelectedFilters(value)}\n                            />\n                        </Box>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Box display='flex'>\n                            {!device.isSmallMobile && (\n                                <Box minWidth='54px'>\n                                    <Legend\n                                        calendar={calendarScreen}\n                                        filters={selectedFilters}\n                                    />\n                                </Box>\n                            )}\n                            <Grid\n                                container\n                                className={clsx({\n                                    [classes.scheduleArea]: !device.isSmallMobile,\n                                })}\n                            >\n                                <FlipMove\n                                    style={{\n                                        display: 'flex',\n                                        flexDirection: device.isSmallMobile\n                                            ? 'column'\n                                            : 'row',\n                                        width: '100%',\n                                    }}\n                                >\n                                    {Object.entries(days).length === 0 &&\n                                    isLoading ? (\n                                        <Grid item xs={12}>\n                                            <Box\n                                                display='flex'\n                                                flexWrap='wrap'\n                                                pl={3}\n                                            >\n                                                {new Array(\n                                                    device.isSmallMobile\n                                                        ? 5\n                                                        : 17,\n                                                )\n                                                    .fill(null)\n                                                    .map((a, index) => {\n                                                        const seed = Math.random();\n\n                                                        if (seed > 0.5)\n                                                            return (\n                                                                <Box\n                                                                    key={index}\n                                                                    width={\n                                                                        device.isSmallMobile\n                                                                            ? 1\n                                                                            : 1 /\n                                                                              6\n                                                                    }\n                                                                >\n                                                                    <EmptyCard />\n                                                                </Box>\n                                                            );\n\n                                                        return (\n                                                            <Box\n                                                                key={index}\n                                                                width={\n                                                                    device.isSmallMobile\n                                                                        ? 1\n                                                                        : 1 / 6\n                                                                }\n                                                            >\n                                                                <SkeletonCard />\n                                                            </Box>\n                                                        );\n                                                    })}\n                                            </Box>\n                                        </Grid>\n                                    ) : (\n                                        Object.entries(days).map(\n                                            ([dayName, day], index, allDays) =>\n                                                device.isSmallMobile ? (\n                                                    <Grid\n                                                        key={dayName}\n                                                        item\n                                                        xs={12}\n                                                    >\n                                                        <Row\n                                                            name={mapDayIdToString(\n                                                                dayName,\n                                                            )}\n                                                            day={day}\n                                                            noc={\n                                                                Object.keys(\n                                                                    days,\n                                                                ).length\n                                                            }\n                                                            suitableSchable={calendarScreen.getSuitableSchedule(\n                                                                {\n                                                                    selected:\n                                                                        selectedFilters\n                                                                            .days\n                                                                            .length ===\n                                                                        0\n                                                                            ? Object.keys(\n                                                                                  days,\n                                                                              )\n                                                                            : selectedFilters.days,\n                                                                },\n                                                            )}\n                                                            isMobile\n                                                        />\n                                                    </Grid>\n                                                ) : (\n                                                    <Box\n                                                        key={dayName}\n                                                        width={\n                                                            1 /\n                                                            Object.entries(days)\n                                                                .length\n                                                        }\n                                                    >\n                                                        <Box\n                                                            className={clsx({\n                                                                [classes.rowContainer]:\n                                                                    allDays.length -\n                                                                        1 !==\n                                                                    index,\n                                                            })}\n                                                            pr={1}\n                                                            mr={1}\n                                                        >\n                                                            <Row\n                                                                name={mapDayIdToString(\n                                                                    dayName,\n                                                                )}\n                                                                day={day}\n                                                                noc={\n                                                                    Object.keys(\n                                                                        days,\n                                                                    ).length\n                                                                }\n                                                                extended\n                                                                extend={\n                                                                    Object.keys(\n                                                                        days,\n                                                                    ).length <=\n                                                                    3\n                                                                }\n                                                                suitableSchable={calendarScreen.getSuitableSchedule(\n                                                                    {\n                                                                        selected:\n                                                                            selectedFilters\n                                                                                .days\n                                                                                .length ===\n                                                                            0\n                                                                                ? Object.keys(\n                                                                                      days,\n                                                                                  )\n                                                                                : selectedFilters.days,\n                                                                    },\n                                                                )}\n                                                            />\n                                                        </Box>\n                                                    </Box>\n                                                ),\n                                        )\n                                    )}\n                                </FlipMove>\n                            </Grid>\n                        </Box>\n                    </Grid>\n                </Grid>\n            </div>\n        </StickyContainer>\n    );\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        display: 'flex',\n        height: '100%',\n    },\n    row: {\n        paddingBottom: 24,\n    },\n    rowContainer: {\n        borderRight: `1px solid ${theme.palette.divider}`,\n    },\n    scheduleArea: {\n        width: 'calc(100% - 54px)',\n    },\n}));\n","import { DataType } from './operations/queries/get_calendar_schedule';\nimport { CalendarItem } from './domains/calendar_item';\nimport { CalendarScreen } from './domains/calendar_screen';\nimport { AllFilters } from './filters';\n\nexport function useCalendarCreator(\n    calendarData: DataType[],\n    filters: AllFilters,\n): {\n    calendarItems: CalendarItem[];\n    sortedByDay: { [index: number]: CalendarItem[] };\n    calendarScreen: CalendarScreen;\n} {\n    const items = calendarData\n        .filter(filterItems)\n        .map((c) => CalendarItem.createFromRaw(c));\n    const sortedByDay = items.reduce((acc, item) => {\n        const isRow = acc[item.dayOfTheWeek];\n        let row = [];\n\n        if (isRow) {\n            row = [...acc[item.dayOfTheWeek]];\n            row.push(item);\n        } else {\n            row = [item];\n        }\n\n        return { ...acc, [item.dayOfTheWeek]: row };\n    }, {} as { [index: number]: CalendarItem[] });\n\n    const calendarScreen = CalendarScreen.create(items);\n\n    return {\n        calendarItems: items,\n        sortedByDay,\n        calendarScreen,\n    };\n\n    function filterItems(item: DataType) {\n        let booleanResults: boolean[] = [];\n\n        if (filters.group_name.length > 0) {\n            booleanResults.push(filters.group_name.includes(item.nazwa_grupy));\n        }\n\n        if (filters.level.length > 0) {\n            booleanResults.push(\n                filters.level.includes(item.poziom_zaawansowania_nazwa),\n            );\n        }\n\n        if (filters.form.length > 0) {\n            booleanResults.push(\n                filters.form.includes(item.id_forma_ruchu + ''),\n            );\n        }\n\n        if (filters.styles.length > 0) {\n            booleanResults.push(\n                filters.styles.includes(item.id_styl_taneczny + ''),\n            );\n        }\n\n        return booleanResults.length > 0\n            ? booleanResults.every((e) => e)\n            : true;\n    }\n}\n\nexport function useCalendarCreator2(\n    calendarData: CalendarItem[],\n): {\n    sortedByDay: { [index: number]: CalendarItem[] };\n    calendarScreen: CalendarScreen;\n} {\n    const sortedByDay = calendarData.reduce((acc, item) => {\n        const isRow = acc[item.dayOfTheWeek];\n        let row = [];\n\n        if (isRow) {\n            row = [...acc[item.dayOfTheWeek]];\n            row.push(item);\n        } else {\n            row = [item];\n        }\n\n        return { ...acc, [item.dayOfTheWeek]: row };\n    }, {} as { [index: number]: CalendarItem[] });\n\n    const calendarScreen = CalendarScreen.create(calendarData);\n\n    return {\n        sortedByDay,\n        calendarScreen,\n    };\n}\n","import React from 'react';\nimport axios from 'axios';\nimport { useSetRecoilState } from 'recoil';\nimport { calendarItemsState } from '../../atoms';\nimport { CalendarItem } from '../../domains/calendar_item';\n\nexport interface DataType {\n    czy_wyswietlac_na_planie_liczbe_uczestnikow: boolean;\n    poziom_zaawansowania: number;\n    czy_wyswietlac_na_planie_date_startu: boolean;\n    nabor: boolean;\n    kategoria_wiekowa_nazwa: string;\n    typ: string;\n    pozostalo_godzin: number;\n    id_alok_cotygod: number;\n    nazwa: string;\n    id_styl_taneczny: number;\n    poziom_zaawansowania_image_url: number;\n    ilosc_mezczyz_zapisanych_do_grupy: number | null;\n    pierwsze_spotkanie: string;\n    dodana: boolean;\n    pozostalo_lekcji: number;\n    platne: boolean | null;\n    ilosc_miejsc: number;\n    id_budynek: number;\n    identyfikator_comp: string;\n    poziom_zaawansowania_nazwa: string;\n    liczba_zrealizowanych_zajec: number;\n    ilosc_uczestnikow_kobiet_w_grupie: number | null;\n    styl_taneczny_link: string;\n    data_wazne_do: string;\n    czestotliwosc: string;\n    czy_aktywna: boolean;\n    id_poziom_zaawansowania: number;\n    cena: number;\n    id_nauczyciel: number;\n    stat_rzeczywista_ilosc_alokacji: number;\n    czy_zapis_dobor_par: boolean;\n    czy_wielu_nauczycieli: boolean;\n    ilosc_kobiet_zapisanych_do_grupy: number | null;\n    data_wazne_od: string;\n    czas_koniec: string;\n    id_plan: number;\n    ostatnie_spotkanie: string;\n    id_system_dydakt: number;\n    identyfikator: string;\n    odwolane_zajecia_grupy: string;\n    id_sala: number;\n    najblizsze_spotkanie: string;\n    stat_ilosc_uczestnikow: number;\n    czas_poczatek: string;\n    budynek: string;\n    id_grupa: number;\n    ilosc_uczestnikow_mezczyz_w_grupie: number | null;\n    sala: string;\n    id_dzien: number;\n    nauczyciel: string;\n    id_koniec: number;\n    id_poczatek: number;\n    nazwa_grupy: string;\n    id_forma_ruchu: number;\n    opis: string | null;\n}\n\ninterface RawRequest {\n    result: {\n        dane: DataType[];\n    };\n}\n\nexport function useGetCalendarSchedule() {\n    const [results, setResults] = React.useState<DataType[]>([]);\n    const [isLoading, setIsLoading] = React.useState(true);\n    const setCalendarItems = useSetRecoilState(calendarItemsState);\n\n    React.useEffect(() => {\n        axios\n            .get<RawRequest>(`${process.env.REACT_APP_CALENDAR_API}/schedule`)\n            .then((response) => {\n                setIsLoading(false);\n                setResults(response.data.result.dane);\n                setCalendarItems(\n                    response.data.result.dane.map((d) =>\n                        CalendarItem.createFromRaw(d),\n                    ),\n                );\n            });\n    }, [setCalendarItems]);\n\n    return {\n        results,\n        isLoading,\n    };\n}\n","import { DataType } from './operations/queries/get_calendar_schedule';\n\nexport function usePossibleFilters(results: DataType[]) {\n    const groupName = results.map((r) => r.nazwa_grupy);\n    const level = results.map((r) => r.poziom_zaawansowania_nazwa);\n    const form = results.map((r) => r.id_forma_ruchu + '');\n    const day = results.map((r) => r.id_dzien + '');\n    const style = results.map((r) => r.id_styl_taneczny + '');\n    const typ = results.map((r) => r.typ);\n\n    return {\n        group_name: Array.from(new Set(groupName)),\n        level: Array.from(new Set(level)),\n        form: Array.from(new Set(form)),\n        days: Array.from(new Set(day)),\n        styles: Array.from(new Set(style)),\n        status: ['otwarte', 'zamkniete'],\n        type: Array.from(new Set(typ)),\n    };\n}\n","import React from 'react';\nimport { ThemeProvider } from '@material-ui/core';\nimport { theme } from './theme';\nimport { Calendar } from './calendar';\nimport { MenuContext } from './components/header';\n\nexport const CardRefContext = React.createContext({\n    cardRef: null as HTMLDivElement | null,\n    setCardRef: (value: HTMLDivElement) => {},\n});\n\nfunction App() {\n    const [menuValue, setMenuValue] = React.useState<\n        { x?: number; title?: string | null }[]\n    >([]);\n    const [cardRef, setCardRef] = React.useState<HTMLDivElement | null>(null);\n\n    React.useEffect(() => {\n        const token = localStorage.getItem('esens_token');\n    }, []);\n\n    return (\n        <CardRefContext.Provider\n            value={{\n                cardRef,\n                setCardRef: (value: HTMLDivElement) => setCardRef(value),\n            }}\n        >\n            <MenuContext.Provider value={{ menuValue, setMenuValue }}>\n                <ThemeProvider theme={theme}>\n                    <Calendar />\n                </ThemeProvider>\n            </MenuContext.Provider>\n        </CardRefContext.Provider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <RecoilRoot>\n            <App />\n        </RecoilRoot>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}